{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/README.md","path":"README.md","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/images/favicon-16x16-next.ico","path":"images/favicon-16x16-next.ico","modified":1,"renderable":0},{"_id":"source/images/favicon-32x32-next.ico","path":"images/favicon-32x32-next.ico","modified":1,"renderable":0},{"_id":"source/images/wechat.png","path":"images/wechat.png","modified":1,"renderable":0},{"_id":"source/images/BackUpHexoAndGit/GitCommand.png","path":"images/BackUpHexoAndGit/GitCommand.png","modified":1,"renderable":0},{"_id":"source/images/BackUpHexoAndGit/hexo-backup.png","path":"images/BackUpHexoAndGit/hexo-backup.png","modified":1,"renderable":0},{"_id":"source/images/cv16.jpg","path":"images/cv16.jpg","modified":1,"renderable":0},{"_id":"themes/maupassant/source/css/donate.css","path":"css/donate.css","modified":1,"renderable":1},{"_id":"themes/maupassant/source/css/default.css","path":"css/default.css","modified":1,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":1,"renderable":1},{"_id":"themes/maupassant/source/donate/index.html","path":"donate/index.html","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/AliPayQR.png","path":"img/AliPayQR.png","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/BTCQR.png","path":"img/BTCQR.png","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/WeChatQR.png","path":"img/WeChatQR.png","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/alipay.svg","path":"img/alipay.svg","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/bitcoin.svg","path":"img/bitcoin.svg","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/github.svg","path":"img/github.svg","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/paypal.svg","path":"img/paypal.svg","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/like.svg","path":"img/like.svg","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/wechat.svg","path":"img/wechat.svg","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/donate.js","path":"js/donate.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/gitment.browser.js","path":"js/gitment.browser.js","modified":1,"renderable":1},{"_id":"source/images/lovelyGril/2.PNG","path":"images/lovelyGril/2.PNG","modified":1,"renderable":0},{"_id":"source/images/lovelyGril/3.JPG","path":"images/lovelyGril/3.JPG","modified":1,"renderable":0},{"_id":"source/images/Josephus/Josephus1.jpg","path":"images/Josephus/Josephus1.jpg","modified":1,"renderable":0},{"_id":"source/images/me.jpg","path":"images/me.jpg","modified":1,"renderable":0},{"_id":"source/images/Josephus/Josephus2.jpg","path":"images/Josephus/Josephus2.jpg","modified":1,"renderable":0},{"_id":"source/images/lovelyGril/1.png","path":"images/lovelyGril/1.png","modified":1,"renderable":0},{"_id":"source/images/lovelyGril/saigao.png","path":"images/lovelyGril/saigao.png","modified":1,"renderable":0},{"_id":"source/images/lovelyGril/lovelyGril.JPG","path":"images/lovelyGril/lovelyGril.JPG","modified":1,"renderable":0}],"Cache":[{"_id":"source/404.html","hash":"9eb955271b03c72a4bb23a06b60e4ecb4070a880","modified":1509028164000},{"_id":"source/CNAME","hash":"0f168a0307cc947f026559fca928a940e316824d","modified":1513863064000},{"_id":"source/README.md","hash":"b54dda8fe3b01b20623481bbebbd0bbbe79762b8","modified":1513939216000},{"_id":"source/about.html","hash":"9eb955271b03c72a4bb23a06b60e4ecb4070a880","modified":1509032248000},{"_id":"source/favicon.ico","hash":"9c805b5d54bb7167d33331b3932a5b02d87bb4c7","modified":1509033996000},{"_id":"themes/maupassant/.DS_Store","hash":"57718dc634d8428604070b05b06e9bd039ce44c7","modified":1522238909206},{"_id":"themes/maupassant/.travis.yml","hash":"0339959f29deddc365e8fe8bd85da524410b9a23","modified":1521134890067},{"_id":"themes/maupassant/LICENSE","hash":"f0ac2f92770650c9835183f79010c0d307b34acd","modified":1521134890067},{"_id":"themes/maupassant/README.md","hash":"253b7eead5dac44c0cbc86dfc25aa352a56850c4","modified":1521134890068},{"_id":"themes/maupassant/_config.yml","hash":"ef33063494c515d334669473820731af4dde6477","modified":1522141267000},{"_id":"themes/maupassant/package.json","hash":"f092433469eb87362e831326425a6a5c3c9fea0d","modified":1521134890073},{"_id":"source/.DS_Store","hash":"209a0bb66e45148faff11fe763767304a559a07a","modified":1522242656011},{"_id":"source/_drafts/2017-12-19-lovelyGril.md","hash":"b666bedbf003c11750c64f53fd7afc6d70395fc2","modified":1521912228375},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1522173596727},{"_id":"source/_posts/2017-11-02-Josephus.md","hash":"a75efbaff5194c1b02e84b80eeb9cb1f9650e5d6","modified":1522173718134},{"_id":"source/_posts/2018-01-28-virtualFunctionAndPloymorphism.md","hash":"2739bc561b632e3e6b3330c95fdce6acbd47287a","modified":1522243183043},{"_id":"source/_posts/2018-01-30-pointInCPP.md","hash":"e3c73e56637e3d29c0ccafa74e660291356b8c27","modified":1522235432564},{"_id":"source/_posts/2018-03-25-BackUpHexoAndGit.md","hash":"7308bd522dc3ac9d91b76e95e1da4d65499a6e08","modified":1522242922647},{"_id":"source/_posts/2018-03-27-docker-tutorial.md","hash":"8995a18a013ce02ded6dd4fe9e95a09162b40f28","modified":1522174019000},{"_id":"source/about/index.md","hash":"00655e6998d3bee0f72c7ce21398e7692f64e205","modified":1522174076599},{"_id":"source/_posts/2017-10-27-CreateWebsite.md","hash":"2ab4a8fa3d6e5132e16178982d80ced2b8211bad","modified":1522242810518},{"_id":"source/archives/index.md","hash":"e473b08e4a6d22c71de543dea9d414582dbc6915","modified":1509078472000},{"_id":"source/categories/index.md","hash":"ed29724c06c43b80b5fe47fc4afcb698b5baaf29","modified":1513582134000},{"_id":"source/images/.DS_Store","hash":"034174e25b4f5ec957834d832d1f9e8b73aa738f","modified":1521916101948},{"_id":"source/images/favicon-16x16-next.ico","hash":"556144604d95b29b3769ae01bc935b1d1c837925","modified":1509034116000},{"_id":"source/images/favicon-32x32-next.ico","hash":"9c805b5d54bb7167d33331b3932a5b02d87bb4c7","modified":1509033996000},{"_id":"source/sitemap/index.md","hash":"4cefeb7e14d3cf92229be8e2dbd8fca7fee67335","modified":1509078390000},{"_id":"source/tags/index.md","hash":"53d14472bc3a1fd16e649a464931a933016a9539","modified":1513582112000},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"5d3556a885e355a8c2da65ef3e7b3ee36a628bfa","modified":1521134890068},{"_id":"themes/maupassant/languages/en.yml","hash":"9dc51349f64e882433957c00dc757366229e0269","modified":1521134890068},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"58e1d04bcd1834fa9d2960e18e027abbbccbedc9","modified":1521134890068},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"b47906ec0abf867fb3e3360bc046b7afb68aee25","modified":1521134890069},{"_id":"themes/maupassant/languages/ko.yml","hash":"909a33e0befa6978e8e72157c6b415b48551ee31","modified":1521134890069},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"778ccc5051d00d3bb9948ad3856bac5e6134edf4","modified":1521893194000},{"_id":"themes/maupassant/languages/ru.yml","hash":"2476a631f4d3c668de04af85a6c2c97ba2a57e96","modified":1521134890069},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"bf3ab970f2ab3f29ddeb9f59bf98163be635e284","modified":1521134890069},{"_id":"themes/maupassant/layout/.DS_Store","hash":"2ad6be499aaff946a9323f781ef9283819c39c6e","modified":1521916853244},{"_id":"themes/maupassant/layout/archive.pug","hash":"665582bb4092fcd81bfaf4d08fc1689abee1e6c4","modified":1521134890072},{"_id":"themes/maupassant/layout/base-without-sidebar.pug","hash":"16c4d1079450f801b5ac079d3cc101856d8f387c","modified":1521134890072},{"_id":"themes/maupassant/layout/base.pug","hash":"a4e32bcb580b76af9ad0582d9d3f0107e34509ed","modified":1521134890073},{"_id":"themes/maupassant/layout/index.pug","hash":"ebe5495c3514e570af033728e664be4b1d4cd659","modified":1521134890073},{"_id":"themes/maupassant/layout/page.pug","hash":"8cfd307b13cad8be34a1e75c4566f96c1722e08e","modified":1521134890073},{"_id":"themes/maupassant/layout/post.pug","hash":"137cdb71fa974eebd194c9d24bb822339b2ff5f3","modified":1521134890073},{"_id":"themes/maupassant/layout/single-column.pug","hash":"0593f261dc208bb0b5c4232eb41eff597a291bd9","modified":1521134890073},{"_id":"themes/maupassant/layout/timeline.pug","hash":"84fbfc92ccdf291b491140d89557553141a5d3f9","modified":1521134890073},{"_id":"themes/maupassant/source/.DS_Store","hash":"47c9b1a86566a663059c9aa5d6dbc02b06f5d950","modified":1521892976684},{"_id":"source/images/wechat.png","hash":"a073ee4e58c52d468fb651c8462a232f459ebe10","modified":1509027838000},{"_id":"source/images/BackUpHexoAndGit/GitCommand.png","hash":"558c5b3217f5613b3d6fbb7b27aaf2e68427fde9","modified":1521914354026},{"_id":"source/images/BackUpHexoAndGit/hexo-backup.png","hash":"9f02d38af40f98dfc47ffe41385dfd004e51c257","modified":1521913532075},{"_id":"source/images/cv16.jpg","hash":"7eb50b68a36c46ed794c7d2506eaee9dae077ed3","modified":1509022396000},{"_id":"themes/maupassant/layout/_partial/after_footer.pug","hash":"7ef2fb9fd6f7588f484aaeca28e0ff5d473b8420","modified":1521894318500},{"_id":"themes/maupassant/layout/_partial/comments.pug","hash":"ae5537e123f7e95e2a423dce3147ef5f3d3114b6","modified":1521134890070},{"_id":"themes/maupassant/layout/_partial/footer.pug","hash":"650781b5bc8c632658ad6880ba663b1e3bfb5798","modified":1521134890070},{"_id":"themes/maupassant/layout/_partial/head.pug","hash":"25d271612a40a9105bf47804cc979728ae57e1a9","modified":1521134890070},{"_id":"themes/maupassant/layout/_partial/helpers.pug","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1521134890070},{"_id":"themes/maupassant/layout/_partial/mathjax.pug","hash":"eb38a1b1bbde2556562edbab78c2f90fd7927e9d","modified":1521134890070},{"_id":"themes/maupassant/layout/_partial/paginator.pug","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1521134890070},{"_id":"themes/maupassant/layout/_partial/mathjax2.pug","hash":"0e2f902fd2f096ff9fcc84f4e60a8b2588962fe3","modified":1521134890070},{"_id":"themes/maupassant/layout/_partial/post_nav.pug","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1521134890071},{"_id":"themes/maupassant/layout/_partial/tag.pug","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1521134890071},{"_id":"themes/maupassant/layout/_partial/totop.pug","hash":"8225bbc3cdb9648bc2e6872e5c616a9a1e4def4f","modified":1521134890071},{"_id":"themes/maupassant/layout/_widget/category.pug","hash":"7c6aed762934ca51aa2669b886254da24b77bc14","modified":1521134890071},{"_id":"themes/maupassant/layout/_widget/links.pug","hash":"c45aa7ec00158579e58f1f8dfd890447bb5e5e54","modified":1521134890071},{"_id":"themes/maupassant/layout/_widget/recent_comments.pug","hash":"4102d446f13b02ff617f055c2a8f726bca12744a","modified":1521134890072},{"_id":"themes/maupassant/layout/_widget/recent_posts.pug","hash":"19431336d724d2118e46da43683bce9063176541","modified":1521134890072},{"_id":"themes/maupassant/layout/_widget/tag.pug","hash":"132f049ce677d0e38f50073174c4ee4b825d4a06","modified":1521134890072},{"_id":"themes/maupassant/layout/_widget/search.pug","hash":"6e8e4123cca38840c4607c1a056205972b82bb7b","modified":1521134890072},{"_id":"themes/maupassant/source/css/donate.css","hash":"d0079ba8202d925a93ab1cb44f2087b81f476755","modified":1521134890074},{"_id":"themes/maupassant/source/css/default.css","hash":"aa2aa56399e4c714ad8ff1a3ace38ad4c124dc67","modified":1521895083431},{"_id":"themes/maupassant/source/css/style.scss","hash":"0ac6929f51cc2844f2e3b780225d78e2992be73f","modified":1522239491694},{"_id":"themes/maupassant/source/donate/index.html","hash":"58260d8d8b5cfa3f46705914e6df164d9f08d9dd","modified":1521134890075},{"_id":"themes/maupassant/source/img/AliPayQR.png","hash":"7787b5d91cbf0e19a1260df24f7d949771c7d45b","modified":1521134890075},{"_id":"themes/maupassant/source/img/BTCQR.png","hash":"7d1c80f953bfb6f0a37d432b04c936ea165bfd97","modified":1521134890075},{"_id":"themes/maupassant/source/img/WeChatQR.png","hash":"8c41aca7883e5ff714c56556f5fff8e7e7c38093","modified":1521134890076},{"_id":"themes/maupassant/source/img/alipay.svg","hash":"46cc0552a9f6d700d618db3fcad25e1b8e697e36","modified":1521134890076},{"_id":"themes/maupassant/source/img/bitcoin.svg","hash":"635f7cca5e675d192be2717788175c7a2146013a","modified":1521134890076},{"_id":"themes/maupassant/source/img/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1521134890076},{"_id":"themes/maupassant/source/img/paypal.svg","hash":"92f3bc495f20a0190d3041be03345c46d6238c25","modified":1521134890077},{"_id":"themes/maupassant/source/img/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1521134890076},{"_id":"themes/maupassant/source/img/wechat.svg","hash":"330496ad42446a29f37a2b97fc388ebd77a8cb9f","modified":1521134890077},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1521134890077},{"_id":"themes/maupassant/source/js/donate.js","hash":"780beaaf44b1e6c057752bdbc085b1048937e5e7","modified":1521134890077},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1521134890078},{"_id":"themes/maupassant/source/js/search.js","hash":"0c0630e2ef213701d393b041f10572e951a27985","modified":1521134890079},{"_id":"themes/maupassant/source/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1521134890079},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1521134890079},{"_id":"themes/maupassant/source/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1521134890079},{"_id":"themes/maupassant/source/js/gitment.browser.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1521134890078},{"_id":"source/images/lovelyGril/2.PNG","hash":"3fd748a1df7d9197be062840631806dc759494c7","modified":1513693380000},{"_id":"source/images/lovelyGril/3.JPG","hash":"79ff6e6c43ae5a508350e4c4800d1c16cd162fb6","modified":1513222284000},{"_id":"source/images/Josephus/Josephus1.jpg","hash":"87910e0dfbf1b2df6c00903bf01fd05cca717d2e","modified":1509632168000},{"_id":"source/images/me.jpg","hash":"3520a46171d634dd2906aca4dace8b9bab9832cb","modified":1513738352000},{"_id":"source/images/Josephus/Josephus2.jpg","hash":"b5a01af4c03d673232039a0f7fd42f10d5852d79","modified":1509632956000},{"_id":"source/images/lovelyGril/1.png","hash":"7b614da011a048ea91ac09ffb9c3601ffe237fd5","modified":1513693380000},{"_id":"source/images/lovelyGril/saigao.png","hash":"9b2974d3f3a8c68b0154a6b19ca764c1bac256c0","modified":1513693022000},{"_id":"source/images/lovelyGril/lovelyGril.JPG","hash":"53d235daf4a147e87ce395ce20c7a3848a16560a","modified":1513680042000},{"_id":"public/atom.xml","hash":"b98101536f0c74f76146df93cebf310f3ae4f002","modified":1522243248693},{"_id":"public/content.json","hash":"76221cf95476b99afd9f86a708208b5ee1bcf19b","modified":1522243248698},{"_id":"public/search.xml","hash":"1f1fa699c979dd5e9366dfe4cc1fd9692aead6ea","modified":1522243248698},{"_id":"public/tipuesearch/tipuesearch_content.json","hash":"13064f466437a2a18dd32f1e23869856ae057ad5","modified":1522243248698},{"_id":"public/404.html","hash":"56b2b2ed6ab92df71ee48bc436f55f3fa01ca4e5","modified":1522243248704},{"_id":"public/about.html","hash":"56b2b2ed6ab92df71ee48bc436f55f3fa01ca4e5","modified":1522243248705},{"_id":"public/about/index.html","hash":"ed49b1f250975186f45e05bb828de5d6f7c3e840","modified":1522243248705},{"_id":"public/archives/index.html","hash":"fd5d07485878d92b6d094b4004b00c2b0f8c03f4","modified":1522243248705},{"_id":"public/categories/index.html","hash":"3efa1dc8a3534e693945654e61641ea57f63c32a","modified":1522243248705},{"_id":"public/sitemap/index.html","hash":"d73a776bd9ebdfa1060474f7aef8b72f62400833","modified":1522243248705},{"_id":"public/tags/index.html","hash":"c39fdd40cdebd47a489fcabafdfa801ac10d28e8","modified":1522243248705},{"_id":"public/2018/03/27/docker-tutorial/index.html","hash":"a529b162887e90d0c36544316673e5580723bb0c","modified":1522243248705},{"_id":"public/2018/01/30/pointInCPP/index.html","hash":"8663f43d2773210af8c276f388e1d08f87043f1a","modified":1522243248705},{"_id":"public/archives/2017/index.html","hash":"c703454c93414d215a1d21c9dc764549b4620087","modified":1522243248705},{"_id":"public/archives/2017/10/index.html","hash":"0ddc18e6465e4b3f894dc613e038b4753c08b2c2","modified":1522243248705},{"_id":"public/archives/2017/11/index.html","hash":"0fbf4a81c5a2660f793e816ad18ba50ef8046cd4","modified":1522243248705},{"_id":"public/archives/2018/index.html","hash":"c425424aacd5ec4c823e47f2485d0c26d52551d0","modified":1522243248705},{"_id":"public/archives/2018/01/index.html","hash":"1d73b773b64ca802fb5729829d546356872a5f57","modified":1522243248706},{"_id":"public/archives/2018/03/index.html","hash":"3fa5253b04bef978cae79faf96c2ec61132337a1","modified":1522243248706},{"_id":"public/categories/算法/index.html","hash":"9fabf6be1ae760f342c6447731de58ed6351043e","modified":1522243248706},{"_id":"public/categories/技术/index.html","hash":"46948f114963b2808bc6885a85ef0eae046d2119","modified":1522243248706},{"_id":"public/index.html","hash":"f029b1ccc87293e26a1ade85cea67e8d81f4e7a8","modified":1522243248706},{"_id":"public/tags/约瑟夫环/index.html","hash":"7991e9f74426cfc4e09d79dabb70598f51abd690","modified":1522243248706},{"_id":"public/tags/算法/index.html","hash":"9fabf6be1ae760f342c6447731de58ed6351043e","modified":1522243248706},{"_id":"public/tags/C/index.html","hash":"1eab3f396d89ac5962bd3b548d3c23a379d1dd9e","modified":1522243248706},{"_id":"public/tags/虚函数/index.html","hash":"12770aaf0953e33f8573ebd2de3a901120841cc2","modified":1522243248706},{"_id":"public/tags/多态/index.html","hash":"8483bde471e1b0741479e2d71e4fc734171cd237","modified":1522243248707},{"_id":"public/tags/指针/index.html","hash":"c39df543c9b3f4ed83658af28009dce14843301d","modified":1522243248707},{"_id":"public/tags/docker/index.html","hash":"53af6789b2697bea2fbba04fefd5385d268eb86e","modified":1522243248707},{"_id":"public/tags/Linux/index.html","hash":"7e5aacc4d55250ec6ff47499d63d5aa469718e63","modified":1522243248707},{"_id":"public/tags/Hexo/index.html","hash":"bef2e6ab907f84b0e3c01dad09184cb6aa8e9426","modified":1522243248707},{"_id":"public/tags/GitHub/index.html","hash":"233a09a98a4960bbd39c195e6f97f740507cba41","modified":1522243248707},{"_id":"public/tags/Git/index.html","hash":"8b3865f59df329fd45fa60a4bb780050d75900a8","modified":1522243248707},{"_id":"public/tags/Github-Pages/index.html","hash":"58d2368b44ed2b30db56befac73051e3974ba718","modified":1522243248707},{"_id":"public/2018/03/25/BackUpHexoAndGit/index.html","hash":"4612abed1cdac360621da6652da71e5b6ef25ad0","modified":1522243248707},{"_id":"public/2018/01/28/virtualFunctionAndPloymorphism/index.html","hash":"c389404464d649ff95e28980b840caa647e98f84","modified":1522243248707},{"_id":"public/2017/11/02/Josephus/index.html","hash":"451eb2d262587527722a7237143bd6194d7d3400","modified":1522243248708},{"_id":"public/2017/10/27/CreateWebsite/index.html","hash":"7535b9968e298ef6ad8b124a4df4421c689781ef","modified":1522243248708},{"_id":"public/CNAME","hash":"0f168a0307cc947f026559fca928a940e316824d","modified":1522243248714},{"_id":"public/favicon.ico","hash":"9c805b5d54bb7167d33331b3932a5b02d87bb4c7","modified":1522243248714},{"_id":"public/README.md","hash":"b54dda8fe3b01b20623481bbebbd0bbbe79762b8","modified":1522243248714},{"_id":"public/images/favicon-16x16-next.ico","hash":"556144604d95b29b3769ae01bc935b1d1c837925","modified":1522243248714},{"_id":"public/images/favicon-32x32-next.ico","hash":"9c805b5d54bb7167d33331b3932a5b02d87bb4c7","modified":1522243248714},{"_id":"public/images/BackUpHexoAndGit/GitCommand.png","hash":"558c5b3217f5613b3d6fbb7b27aaf2e68427fde9","modified":1522243248715},{"_id":"public/images/BackUpHexoAndGit/hexo-backup.png","hash":"9f02d38af40f98dfc47ffe41385dfd004e51c257","modified":1522243248715},{"_id":"public/img/AliPayQR.png","hash":"7787b5d91cbf0e19a1260df24f7d949771c7d45b","modified":1522243248715},{"_id":"public/img/BTCQR.png","hash":"7d1c80f953bfb6f0a37d432b04c936ea165bfd97","modified":1522243248715},{"_id":"public/img/WeChatQR.png","hash":"8c41aca7883e5ff714c56556f5fff8e7e7c38093","modified":1522243248715},{"_id":"public/img/alipay.svg","hash":"46cc0552a9f6d700d618db3fcad25e1b8e697e36","modified":1522243248715},{"_id":"public/img/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1522243248715},{"_id":"public/img/bitcoin.svg","hash":"635f7cca5e675d192be2717788175c7a2146013a","modified":1522243248715},{"_id":"public/img/paypal.svg","hash":"92f3bc495f20a0190d3041be03345c46d6238c25","modified":1522243248715},{"_id":"public/img/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1522243248715},{"_id":"public/img/wechat.svg","hash":"330496ad42446a29f37a2b97fc388ebd77a8cb9f","modified":1522243248715},{"_id":"public/images/wechat.png","hash":"a073ee4e58c52d468fb651c8462a232f459ebe10","modified":1522243248744},{"_id":"public/css/donate.css","hash":"d0079ba8202d925a93ab1cb44f2087b81f476755","modified":1522243248749},{"_id":"public/donate/index.html","hash":"58260d8d8b5cfa3f46705914e6df164d9f08d9dd","modified":1522243248749},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1522243248749},{"_id":"public/js/donate.js","hash":"89f0b9d9d0c4fce183161d29c2a44aef750efb27","modified":1522243248749},{"_id":"public/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1522243248749},{"_id":"public/js/search.js","hash":"0c0630e2ef213701d393b041f10572e951a27985","modified":1522243248749},{"_id":"public/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1522243248749},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1522243248749},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1522243248749},{"_id":"public/css/default.css","hash":"aa2aa56399e4c714ad8ff1a3ace38ad4c124dc67","modified":1522243248749},{"_id":"public/css/style.css","hash":"eebf8a98fb798bf09f3c45b1b49db10a85f57fe5","modified":1522243248749},{"_id":"public/js/gitment.browser.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1522243248750},{"_id":"public/images/cv16.jpg","hash":"7eb50b68a36c46ed794c7d2506eaee9dae077ed3","modified":1522243248750},{"_id":"public/images/lovelyGril/2.PNG","hash":"3fd748a1df7d9197be062840631806dc759494c7","modified":1522243248753},{"_id":"public/images/lovelyGril/3.JPG","hash":"79ff6e6c43ae5a508350e4c4800d1c16cd162fb6","modified":1522243248753},{"_id":"public/images/Josephus/Josephus1.jpg","hash":"87910e0dfbf1b2df6c00903bf01fd05cca717d2e","modified":1522243248770},{"_id":"public/images/me.jpg","hash":"3520a46171d634dd2906aca4dace8b9bab9832cb","modified":1522243248774},{"_id":"public/images/Josephus/Josephus2.jpg","hash":"b5a01af4c03d673232039a0f7fd42f10d5852d79","modified":1522243248778},{"_id":"public/images/lovelyGril/1.png","hash":"7b614da011a048ea91ac09ffb9c3601ffe237fd5","modified":1522243248780},{"_id":"public/images/lovelyGril/saigao.png","hash":"9b2974d3f3a8c68b0154a6b19ca764c1bac256c0","modified":1522243248783},{"_id":"public/images/lovelyGril/lovelyGril.JPG","hash":"53d235daf4a147e87ce395ce20c7a3848a16560a","modified":1522243248785}],"Category":[{"name":"生活随笔","_id":"cjfb4bqdm0006jl0ripa4m52r"},{"name":"算法","_id":"cjfb4bqdq000djl0rzhl0oyi6"},{"name":"技术","_id":"cjfb4bqdt000jjl0rk0gygosr"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","date":"2018-03-28T13:20:06.480Z","updated":"2017-10-26T14:29:24.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cjfb4bqcu0000jl0r2072n768","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>"},{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","source":"about.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","date":"2018-03-28T13:20:06.478Z","updated":"2017-10-26T15:37:28.000Z","path":"about.html","title":"","comments":1,"layout":"page","_id":"cjfb4bqcv0001jl0r1x2bsz2v","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>"},{"title":"关于我","date":"2017-10-26T15:56:51.000Z","_content":"\n本科就读东南大学CS\n屁民一个，在努力。\n\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2017-10-26 23:56:51\n---\n\n本科就读东南大学CS\n屁民一个，在努力。\n\n","updated":"2018-03-27T18:07:56.599Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjfb4bqdj0003jl0ra2jb8cc2","content":"<p>本科就读东南大学CS<br>屁民一个，在努力。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本科就读东南大学CS<br>屁民一个，在努力。</p>\n"},{"title":"archives","date":"2017-10-27T04:27:51.000Z","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2017-10-27 12:27:51\n---\n","updated":"2017-10-27T04:27:52.000Z","path":"archives/index.html","comments":1,"layout":"page","_id":"cjfb4bqdl0005jl0rmlxejye7","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2017-10-27T04:24:37.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-10-27 12:24:37\ntype: categories\n---\n","updated":"2017-12-18T07:28:54.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjfb4bqdn0009jl0rzbc2g8h2","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"sitemap","date":"2017-10-27T04:26:29.000Z","_content":"","source":"sitemap/index.md","raw":"---\ntitle: sitemap\ndate: 2017-10-27 12:26:29\n---\n","updated":"2017-10-27T04:26:30.000Z","path":"sitemap/index.html","comments":1,"layout":"page","_id":"cjfb4bqdp000bjl0ryri5um57","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2017-10-26T15:53:28.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-10-26 23:53:28\ntype: \"tags\"\n---\n","updated":"2017-12-18T07:28:32.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjfb4bqyx001njl0r9z0yw9mh","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"layout":"drafts","title":"全剧终","date":"2017-12-19T10:41:52.000Z","password":"lovegril1219","_content":"2017年12月13号这天，周三。\n<!--more-->\n晚上已经很冷了，我待在图书馆做题，遇到一个可爱的女生。\n为什么说“可爱”这么平凡的形容词，因为，我实在是想不起来有更合适的词语了。Gakki曾说过，“可愛い”是最高级的形容词，用来形容，再适合不过了。\n![1213](/images/lovelyGril/saigao.png)\n因为怂，没敢要联系方式，后悔不已，去表白墙发了下，结果是。。。找到了这件衣服。\n![1](/images/lovelyGril/2.PNG)\n![2](/images/lovelyGril/3.JPG)\n周五的时候，又在图书馆附近的位置遇到她，下定决心走的时候跟着，要个联系方式，即使是有男朋友了，也想认识下。怂，告终。。。\n![3](/images/lovelyGril/1.PNG)\n12月19号，周二下午，碰到她在图书馆门口，感觉今天一天运气都超级好。进了图书馆，走到老位置附近，发现有个很眼熟的书包。不知道是不是她的，但是有点像，抱着希望坐下了，等啊等，等了半个小时多，她终于来了！内心一顿激动，但是，可能是看到旁边坐了我，她把书包拿起来走了。。。换位置了。心凉凉，一直等到晚上，有机会偷偷拍了一张照片。男生都离她远一点啊，我求求你们了，特别是坐在她对面的老兄，你专心用电脑别看妹子！\n![1219](/images/lovelyGril/lovelyGril.JPG)\n晚上因为要帮同学拿快递，不得已提前离开了图书馆。走的时候她还在那认真的做高数题，好可爱！想想大一时候的自己，惭愧。。。\n<p>\n    12月22号，周五，今天是冬至。已经三天没有再碰到过妹子了。周三晚上的时候忙完8点半了，以为妹子会来图书馆，兴冲冲跑到图书馆，找了一圈没有找到人，周四，周五都是相同的情况。有的机会，错过了就真的再也没有了。我对她的了解，只有外貌和衣服而已，如果不能再碰到，可能这辈子都再也找不到她了。\n</p>\n<p>\n    12月23号，周六，今天是考研的第一天。自从上次周二下午碰到妹子之后，已经四天再也没有见到过她了。我非常确定我喜欢她，因为每天出发去图书馆之前我都在祈祷今天能碰到她，而每次失望之后都感觉非常难过。可能是因为考研封了教学楼的原因，今天图书馆人格外的多，偶遇过她的自习室已经没有了空位，也没有见到她的书包，不得已换了自习室。她今天会来图书馆吗？她今天还会去偶遇的那间自习室吗？她会不会偶然的出现在我的旁边，我一直在期待着。可能最后还是失望吧。\n</p>\n<p>\n    12月24号，结束了，妹子有男朋友。早上起床还在祈祷妹子下午去自习室，结果还真碰到了。她跟女同学一起来的，找到座位之后我心跳得很快，简直要窒息了。一下午的犹豫，我不想再错过这次机会，写了纸条，改了两遍。去了厕所两趟，开水房一趟，始终没有勇气给出纸条。下定决心，打算从图书馆离开，刚起身，发现她也朝着我这边走，找她同学。鼓起勇气要了联系方式，内心非常激动，结果翻了空间，她已经有男朋友了啊。真的是个温柔的人，怕我尴尬还陪我聊了几句，不过我，只会制造尴尬吧。\n</p>\n<p>\n    我认为这是天意。大学末尾的心动，没有任何机会。以后有缘再说吧。\n</p>","source":"_drafts/2017-12-19-lovelyGril.md","raw":"---\nlayout: drafts\ntitle: 全剧终\ndate: 2017-12-19 18:41:52\ntags:\n- 生活\ncategories:\n- 生活随笔\npassword: lovegril1219\n---\n2017年12月13号这天，周三。\n<!--more-->\n晚上已经很冷了，我待在图书馆做题，遇到一个可爱的女生。\n为什么说“可爱”这么平凡的形容词，因为，我实在是想不起来有更合适的词语了。Gakki曾说过，“可愛い”是最高级的形容词，用来形容，再适合不过了。\n![1213](/images/lovelyGril/saigao.png)\n因为怂，没敢要联系方式，后悔不已，去表白墙发了下，结果是。。。找到了这件衣服。\n![1](/images/lovelyGril/2.PNG)\n![2](/images/lovelyGril/3.JPG)\n周五的时候，又在图书馆附近的位置遇到她，下定决心走的时候跟着，要个联系方式，即使是有男朋友了，也想认识下。怂，告终。。。\n![3](/images/lovelyGril/1.PNG)\n12月19号，周二下午，碰到她在图书馆门口，感觉今天一天运气都超级好。进了图书馆，走到老位置附近，发现有个很眼熟的书包。不知道是不是她的，但是有点像，抱着希望坐下了，等啊等，等了半个小时多，她终于来了！内心一顿激动，但是，可能是看到旁边坐了我，她把书包拿起来走了。。。换位置了。心凉凉，一直等到晚上，有机会偷偷拍了一张照片。男生都离她远一点啊，我求求你们了，特别是坐在她对面的老兄，你专心用电脑别看妹子！\n![1219](/images/lovelyGril/lovelyGril.JPG)\n晚上因为要帮同学拿快递，不得已提前离开了图书馆。走的时候她还在那认真的做高数题，好可爱！想想大一时候的自己，惭愧。。。\n<p>\n    12月22号，周五，今天是冬至。已经三天没有再碰到过妹子了。周三晚上的时候忙完8点半了，以为妹子会来图书馆，兴冲冲跑到图书馆，找了一圈没有找到人，周四，周五都是相同的情况。有的机会，错过了就真的再也没有了。我对她的了解，只有外貌和衣服而已，如果不能再碰到，可能这辈子都再也找不到她了。\n</p>\n<p>\n    12月23号，周六，今天是考研的第一天。自从上次周二下午碰到妹子之后，已经四天再也没有见到过她了。我非常确定我喜欢她，因为每天出发去图书馆之前我都在祈祷今天能碰到她，而每次失望之后都感觉非常难过。可能是因为考研封了教学楼的原因，今天图书馆人格外的多，偶遇过她的自习室已经没有了空位，也没有见到她的书包，不得已换了自习室。她今天会来图书馆吗？她今天还会去偶遇的那间自习室吗？她会不会偶然的出现在我的旁边，我一直在期待着。可能最后还是失望吧。\n</p>\n<p>\n    12月24号，结束了，妹子有男朋友。早上起床还在祈祷妹子下午去自习室，结果还真碰到了。她跟女同学一起来的，找到座位之后我心跳得很快，简直要窒息了。一下午的犹豫，我不想再错过这次机会，写了纸条，改了两遍。去了厕所两趟，开水房一趟，始终没有勇气给出纸条。下定决心，打算从图书馆离开，刚起身，发现她也朝着我这边走，找她同学。鼓起勇气要了联系方式，内心非常激动，结果翻了空间，她已经有男朋友了啊。真的是个温柔的人，怕我尴尬还陪我聊了几句，不过我，只会制造尴尬吧。\n</p>\n<p>\n    我认为这是天意。大学末尾的心动，没有任何机会。以后有缘再说吧。\n</p>","slug":"lovelyGril","published":0,"updated":"2018-03-24T17:23:48.375Z","comments":1,"photos":[],"link":"","_id":"cjfb4bqdh0002jl0rnfo5z06p","content":"<p>2017年12月13号这天，周三。<br><a id=\"more\"></a><br>晚上已经很冷了，我待在图书馆做题，遇到一个可爱的女生。<br>为什么说“可爱”这么平凡的形容词，因为，我实在是想不起来有更合适的词语了。Gakki曾说过，“可愛い”是最高级的形容词，用来形容，再适合不过了。<br><img src=\"/images/lovelyGril/saigao.png\" alt=\"1213\"><br>因为怂，没敢要联系方式，后悔不已，去表白墙发了下，结果是。。。找到了这件衣服。<br><img src=\"/images/lovelyGril/2.PNG\" alt=\"1\"><br><img src=\"/images/lovelyGril/3.JPG\" alt=\"2\"><br>周五的时候，又在图书馆附近的位置遇到她，下定决心走的时候跟着，要个联系方式，即使是有男朋友了，也想认识下。怂，告终。。。<br><img src=\"/images/lovelyGril/1.PNG\" alt=\"3\"><br>12月19号，周二下午，碰到她在图书馆门口，感觉今天一天运气都超级好。进了图书馆，走到老位置附近，发现有个很眼熟的书包。不知道是不是她的，但是有点像，抱着希望坐下了，等啊等，等了半个小时多，她终于来了！内心一顿激动，但是，可能是看到旁边坐了我，她把书包拿起来走了。。。换位置了。心凉凉，一直等到晚上，有机会偷偷拍了一张照片。男生都离她远一点啊，我求求你们了，特别是坐在她对面的老兄，你专心用电脑别看妹子！<br><img src=\"/images/lovelyGril/lovelyGril.JPG\" alt=\"1219\"><br>晚上因为要帮同学拿快递，不得已提前离开了图书馆。走的时候她还在那认真的做高数题，好可爱！想想大一时候的自己，惭愧。。。</p>\n<p><br>    12月22号，周五，今天是冬至。已经三天没有再碰到过妹子了。周三晚上的时候忙完8点半了，以为妹子会来图书馆，兴冲冲跑到图书馆，找了一圈没有找到人，周四，周五都是相同的情况。有的机会，错过了就真的再也没有了。我对她的了解，只有外貌和衣服而已，如果不能再碰到，可能这辈子都再也找不到她了。<br></p><br><p><br>    12月23号，周六，今天是考研的第一天。自从上次周二下午碰到妹子之后，已经四天再也没有见到过她了。我非常确定我喜欢她，因为每天出发去图书馆之前我都在祈祷今天能碰到她，而每次失望之后都感觉非常难过。可能是因为考研封了教学楼的原因，今天图书馆人格外的多，偶遇过她的自习室已经没有了空位，也没有见到她的书包，不得已换了自习室。她今天会来图书馆吗？她今天还会去偶遇的那间自习室吗？她会不会偶然的出现在我的旁边，我一直在期待着。可能最后还是失望吧。<br></p><br><p><br>    12月24号，结束了，妹子有男朋友。早上起床还在祈祷妹子下午去自习室，结果还真碰到了。她跟女同学一起来的，找到座位之后我心跳得很快，简直要窒息了。一下午的犹豫，我不想再错过这次机会，写了纸条，改了两遍。去了厕所两趟，开水房一趟，始终没有勇气给出纸条。下定决心，打算从图书馆离开，刚起身，发现她也朝着我这边走，找她同学。鼓起勇气要了联系方式，内心非常激动，结果翻了空间，她已经有男朋友了啊。真的是个温柔的人，怕我尴尬还陪我聊了几句，不过我，只会制造尴尬吧。<br></p><br><p><br>    我认为这是天意。大学末尾的心动，没有任何机会。以后有缘再说吧。<br></p>","site":{"data":{}},"excerpt":"<p>2017年12月13号这天，周三。<br>","more":"<br>晚上已经很冷了，我待在图书馆做题，遇到一个可爱的女生。<br>为什么说“可爱”这么平凡的形容词，因为，我实在是想不起来有更合适的词语了。Gakki曾说过，“可愛い”是最高级的形容词，用来形容，再适合不过了。<br><img src=\"/images/lovelyGril/saigao.png\" alt=\"1213\"><br>因为怂，没敢要联系方式，后悔不已，去表白墙发了下，结果是。。。找到了这件衣服。<br><img src=\"/images/lovelyGril/2.PNG\" alt=\"1\"><br><img src=\"/images/lovelyGril/3.JPG\" alt=\"2\"><br>周五的时候，又在图书馆附近的位置遇到她，下定决心走的时候跟着，要个联系方式，即使是有男朋友了，也想认识下。怂，告终。。。<br><img src=\"/images/lovelyGril/1.PNG\" alt=\"3\"><br>12月19号，周二下午，碰到她在图书馆门口，感觉今天一天运气都超级好。进了图书馆，走到老位置附近，发现有个很眼熟的书包。不知道是不是她的，但是有点像，抱着希望坐下了，等啊等，等了半个小时多，她终于来了！内心一顿激动，但是，可能是看到旁边坐了我，她把书包拿起来走了。。。换位置了。心凉凉，一直等到晚上，有机会偷偷拍了一张照片。男生都离她远一点啊，我求求你们了，特别是坐在她对面的老兄，你专心用电脑别看妹子！<br><img src=\"/images/lovelyGril/lovelyGril.JPG\" alt=\"1219\"><br>晚上因为要帮同学拿快递，不得已提前离开了图书馆。走的时候她还在那认真的做高数题，好可爱！想想大一时候的自己，惭愧。。。</p>\n<p><br>    12月22号，周五，今天是冬至。已经三天没有再碰到过妹子了。周三晚上的时候忙完8点半了，以为妹子会来图书馆，兴冲冲跑到图书馆，找了一圈没有找到人，周四，周五都是相同的情况。有的机会，错过了就真的再也没有了。我对她的了解，只有外貌和衣服而已，如果不能再碰到，可能这辈子都再也找不到她了。<br></p><br><p><br>    12月23号，周六，今天是考研的第一天。自从上次周二下午碰到妹子之后，已经四天再也没有见到过她了。我非常确定我喜欢她，因为每天出发去图书馆之前我都在祈祷今天能碰到她，而每次失望之后都感觉非常难过。可能是因为考研封了教学楼的原因，今天图书馆人格外的多，偶遇过她的自习室已经没有了空位，也没有见到她的书包，不得已换了自习室。她今天会来图书馆吗？她今天还会去偶遇的那间自习室吗？她会不会偶然的出现在我的旁边，我一直在期待着。可能最后还是失望吧。<br></p><br><p><br>    12月24号，结束了，妹子有男朋友。早上起床还在祈祷妹子下午去自习室，结果还真碰到了。她跟女同学一起来的，找到座位之后我心跳得很快，简直要窒息了。一下午的犹豫，我不想再错过这次机会，写了纸条，改了两遍。去了厕所两趟，开水房一趟，始终没有勇气给出纸条。下定决心，打算从图书馆离开，刚起身，发现她也朝着我这边走，找她同学。鼓起勇气要了联系方式，内心非常激动，结果翻了空间，她已经有男朋友了啊。真的是个温柔的人，怕我尴尬还陪我聊了几句，不过我，只会制造尴尬吧。<br></p><br><p><br>    我认为这是天意。大学末尾的心动，没有任何机会。以后有缘再说吧。<br></p>"},{"title":"Josephus","date":"2017-11-02T06:40:49.000Z","_content":"约瑟夫斯问题（有时也称为约瑟夫斯置换），是一个出现在计算机科学和数学中的问题。在计算机编程的算法中，类似问题又称为约瑟夫环。\n有n个囚犯站成一个圆圈，准备处决。首先从一个人开始，越过k-2个人（因为第一个人已经被越过），并杀掉第k个人。接着，再越过k-1个人，并杀掉第k个人。这个过程沿着圆圈一直进行，直到最终只剩下一个人留下，这个人就可以继续活着。\n问题是，给定了n和k，一开始要站在什么地方才能避免被处决？\n<!--more-->\n这个问题是以弗拉维奥·约瑟夫斯命名的，它是1世纪的一名犹太历史学家。他在自己的日记中写道，他和他的40个战友被罗马军队包围在洞中。他们讨论是自杀还是被俘，最终决定自杀，并以抽签的方式决定谁杀掉谁。约瑟夫斯和另外一个人是最后两个留下的人。约瑟夫斯说服了那个人，他们将向罗马军队投降，不再自杀。约瑟夫斯把他的存活归因于运气或天意，他不知道是哪一个。\n简化之后的问题就变成了，n个人（编号0~(n-1))，从0开始报数，报到(m-1)的退出，剩下的人继续从0开始报数。求胜利者的编号。 \n# 一般解法\n非常容易想到的方法就是利用环链表来做，构建一个环链表，每个结点的编号为0, 1, ...... n-1。每次从当前位置向前移动m-1步，然后删除这个结点。最后剩下的结点就是胜利者。\n```\nint Josephus(int n, int m) {\n\tif (n < 1 || m < 1)\n\t\treturn -1;\n\n\tlist<int> listInt;\n\tunsigned i;\n\t//初始化链表\n\tfor (i = 0; i < n; i++) {\n\t\tlistInt.push_back(i);\n\t}\n\n\tlist<int>::iterator iterCurrent = listInt.begin();\n\twhile (listInt.size() > 1) {\n\t\t//前进m-1步\n\t\tfor (i = 0; i < m - 1; i++) {\n\t\t\tif (++iterCurrent == listInt.end())\n\t\t\t\titerCurrent = listInt.begin();\n\t\t}\n\t\t//临时保存删除的节点\n\t\tlist<int>::iterator iterDel = iterCurrent;\n\t\tif (++iterCurrent == listInt.end())\n\t\t\titerCurrent = listInt.begin();\n\t\tlistInt.erase(iterDel);\n\t}\n\treturn *iterCurrent;\n}\n```\n上述方法效率很低，其时间复杂度为O(m*n)。当m和n很大时候，很难在短时间内得出结果，不过好处就是可以给出n-1个人出圈的顺序，只需要在删除之前保存一下。\n# 进阶解法\n普通的解法之所以复杂度高，是因为我们不知道哪个节点会保留下来。所以需要不断遍历删除，直到剩下最后一个节点。如果我们不通过遍历，而是直接计算出最后活下来的节点是哪个，就可以降低时间复杂度。\n推导过程如下：\n如果只剩下一个节点，那么幸存的节点就是该节点，编号为1，Live(1)=1;\n如果剩下两个节点，幸存的节点为Live(2);\n如果剩下三个节点，幸存的节点为Live(3) ;\n...\n如果剩下i个节点，幸存的节点为Live(i);\n...\n如果剩下n个节点，幸存的节点为Live(n);\n\n我们已知Live(1)=1，如果确定Live(i-1)和Live(i)是什么关系，就可以递归过程求出Live(n)\n\n如果一个节点数为n的链表，编号从头结点到尾节点为1~n，如果删除编号为s的一个节点，剩下的节点编号将会怎么变化？如下图所示\n![Josephus1](/images/Josephus/Josephus1.jpg)\n设原链表编号为y，删除一个节点之后的编号为x，那么我们可以得到以下的公式\n```\ny = (x + s -1) % n + 1\n```\n因此可以根据Live(i-1)以及被删除的节点编号来求得Live(i)的值，那么现在问题变成了如何求被删除节点的编号\n![Josephus2](/images/Josephus/Josephus2.jpg)\n如图所示，对于每一个节点，如果报数值不到m，就会一直报数下去，1~n~2n~...由图我们可以得到报数值A与编号值B的关系，即\n```\nB = (A - 1) % n + 1\n```\n如果报到m，报数的节点就是要删除的节点，那么该节点的编号根据公式可以得出\n```\ns = (m - 1) % n + 1\n```\n得到s之后，我们可以通过上面第一步得出的关系\n```\nLive(i) = (Live(i - 1) + s - 1) % i + 1\n```\n把s带入之后，两式合并，结果为\n```\nLive(i) = (Live(i - 1) + m - 1) % i + 1\n```\n整个过程总结如下： \n　　1、遍历链表，得到链表的节点数n，O(n) \n　　2、根据n和m的值，以及上文推导的Live(i)与Live(i-1)的关系，递归求得幸存节点的编号。该递归是单决策递归且递归为n层，所以时间复杂度为O(n) \n　　3、根据得到的幸存节点的编号，遍历链表找到该节点，O(n) \n```\nclass Solution {\npublic:\n    int LastRemaining_Solution(unsigned int n, unsigned int m)\n    {\n        if(n==0)\n            return -1;\n        if(n==1)\n            return 0;\n        else\n            return (LastRemaining_Solution(n-1,m)+m)%n;\n    }\n};\n```","source":"_posts/2017-11-02-Josephus.md","raw":"---\ntitle: Josephus\ndate: 2017-11-02 14:40:49\ntags:\n- 约瑟夫环\n- 算法\n- C++\ncategories:\n- 算法\n---\n约瑟夫斯问题（有时也称为约瑟夫斯置换），是一个出现在计算机科学和数学中的问题。在计算机编程的算法中，类似问题又称为约瑟夫环。\n有n个囚犯站成一个圆圈，准备处决。首先从一个人开始，越过k-2个人（因为第一个人已经被越过），并杀掉第k个人。接着，再越过k-1个人，并杀掉第k个人。这个过程沿着圆圈一直进行，直到最终只剩下一个人留下，这个人就可以继续活着。\n问题是，给定了n和k，一开始要站在什么地方才能避免被处决？\n<!--more-->\n这个问题是以弗拉维奥·约瑟夫斯命名的，它是1世纪的一名犹太历史学家。他在自己的日记中写道，他和他的40个战友被罗马军队包围在洞中。他们讨论是自杀还是被俘，最终决定自杀，并以抽签的方式决定谁杀掉谁。约瑟夫斯和另外一个人是最后两个留下的人。约瑟夫斯说服了那个人，他们将向罗马军队投降，不再自杀。约瑟夫斯把他的存活归因于运气或天意，他不知道是哪一个。\n简化之后的问题就变成了，n个人（编号0~(n-1))，从0开始报数，报到(m-1)的退出，剩下的人继续从0开始报数。求胜利者的编号。 \n# 一般解法\n非常容易想到的方法就是利用环链表来做，构建一个环链表，每个结点的编号为0, 1, ...... n-1。每次从当前位置向前移动m-1步，然后删除这个结点。最后剩下的结点就是胜利者。\n```\nint Josephus(int n, int m) {\n\tif (n < 1 || m < 1)\n\t\treturn -1;\n\n\tlist<int> listInt;\n\tunsigned i;\n\t//初始化链表\n\tfor (i = 0; i < n; i++) {\n\t\tlistInt.push_back(i);\n\t}\n\n\tlist<int>::iterator iterCurrent = listInt.begin();\n\twhile (listInt.size() > 1) {\n\t\t//前进m-1步\n\t\tfor (i = 0; i < m - 1; i++) {\n\t\t\tif (++iterCurrent == listInt.end())\n\t\t\t\titerCurrent = listInt.begin();\n\t\t}\n\t\t//临时保存删除的节点\n\t\tlist<int>::iterator iterDel = iterCurrent;\n\t\tif (++iterCurrent == listInt.end())\n\t\t\titerCurrent = listInt.begin();\n\t\tlistInt.erase(iterDel);\n\t}\n\treturn *iterCurrent;\n}\n```\n上述方法效率很低，其时间复杂度为O(m*n)。当m和n很大时候，很难在短时间内得出结果，不过好处就是可以给出n-1个人出圈的顺序，只需要在删除之前保存一下。\n# 进阶解法\n普通的解法之所以复杂度高，是因为我们不知道哪个节点会保留下来。所以需要不断遍历删除，直到剩下最后一个节点。如果我们不通过遍历，而是直接计算出最后活下来的节点是哪个，就可以降低时间复杂度。\n推导过程如下：\n如果只剩下一个节点，那么幸存的节点就是该节点，编号为1，Live(1)=1;\n如果剩下两个节点，幸存的节点为Live(2);\n如果剩下三个节点，幸存的节点为Live(3) ;\n...\n如果剩下i个节点，幸存的节点为Live(i);\n...\n如果剩下n个节点，幸存的节点为Live(n);\n\n我们已知Live(1)=1，如果确定Live(i-1)和Live(i)是什么关系，就可以递归过程求出Live(n)\n\n如果一个节点数为n的链表，编号从头结点到尾节点为1~n，如果删除编号为s的一个节点，剩下的节点编号将会怎么变化？如下图所示\n![Josephus1](/images/Josephus/Josephus1.jpg)\n设原链表编号为y，删除一个节点之后的编号为x，那么我们可以得到以下的公式\n```\ny = (x + s -1) % n + 1\n```\n因此可以根据Live(i-1)以及被删除的节点编号来求得Live(i)的值，那么现在问题变成了如何求被删除节点的编号\n![Josephus2](/images/Josephus/Josephus2.jpg)\n如图所示，对于每一个节点，如果报数值不到m，就会一直报数下去，1~n~2n~...由图我们可以得到报数值A与编号值B的关系，即\n```\nB = (A - 1) % n + 1\n```\n如果报到m，报数的节点就是要删除的节点，那么该节点的编号根据公式可以得出\n```\ns = (m - 1) % n + 1\n```\n得到s之后，我们可以通过上面第一步得出的关系\n```\nLive(i) = (Live(i - 1) + s - 1) % i + 1\n```\n把s带入之后，两式合并，结果为\n```\nLive(i) = (Live(i - 1) + m - 1) % i + 1\n```\n整个过程总结如下： \n　　1、遍历链表，得到链表的节点数n，O(n) \n　　2、根据n和m的值，以及上文推导的Live(i)与Live(i-1)的关系，递归求得幸存节点的编号。该递归是单决策递归且递归为n层，所以时间复杂度为O(n) \n　　3、根据得到的幸存节点的编号，遍历链表找到该节点，O(n) \n```\nclass Solution {\npublic:\n    int LastRemaining_Solution(unsigned int n, unsigned int m)\n    {\n        if(n==0)\n            return -1;\n        if(n==1)\n            return 0;\n        else\n            return (LastRemaining_Solution(n-1,m)+m)%n;\n    }\n};\n```","slug":"Josephus","published":1,"updated":"2018-03-27T18:01:58.134Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfb4bqdk0004jl0rf08o3xcp","content":"<p>约瑟夫斯问题（有时也称为约瑟夫斯置换），是一个出现在计算机科学和数学中的问题。在计算机编程的算法中，类似问题又称为约瑟夫环。<br>有n个囚犯站成一个圆圈，准备处决。首先从一个人开始，越过k-2个人（因为第一个人已经被越过），并杀掉第k个人。接着，再越过k-1个人，并杀掉第k个人。这个过程沿着圆圈一直进行，直到最终只剩下一个人留下，这个人就可以继续活着。<br>问题是，给定了n和k，一开始要站在什么地方才能避免被处决？<br><a id=\"more\"></a><br>这个问题是以弗拉维奥·约瑟夫斯命名的，它是1世纪的一名犹太历史学家。他在自己的日记中写道，他和他的40个战友被罗马军队包围在洞中。他们讨论是自杀还是被俘，最终决定自杀，并以抽签的方式决定谁杀掉谁。约瑟夫斯和另外一个人是最后两个留下的人。约瑟夫斯说服了那个人，他们将向罗马军队投降，不再自杀。约瑟夫斯把他的存活归因于运气或天意，他不知道是哪一个。<br>简化之后的问题就变成了，n个人（编号0~(n-1))，从0开始报数，报到(m-1)的退出，剩下的人继续从0开始报数。求胜利者的编号。 </p>\n<h1 id=\"一般解法\"><a href=\"#一般解法\" class=\"headerlink\" title=\"一般解法\"></a>一般解法</h1><p>非常容易想到的方法就是利用环链表来做，构建一个环链表，每个结点的编号为0, 1, …… n-1。每次从当前位置向前移动m-1步，然后删除这个结点。最后剩下的结点就是胜利者。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Josephus</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> m)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || m &lt; <span class=\"number\">1</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt; listInt;</div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> i;</div><div class=\"line\">\t<span class=\"comment\">//初始化链表</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">\t\tlistInt.push_back(i);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator iterCurrent = listInt.begin();</div><div class=\"line\">\t<span class=\"keyword\">while</span> (listInt.size() &gt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">//前进m-1步</span></div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; m - <span class=\"number\">1</span>; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (++iterCurrent == listInt.end())</div><div class=\"line\">\t\t\t\titerCurrent = listInt.begin();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">//临时保存删除的节点</span></div><div class=\"line\">\t\t<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator iterDel = iterCurrent;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (++iterCurrent == listInt.end())</div><div class=\"line\">\t\t\titerCurrent = listInt.begin();</div><div class=\"line\">\t\tlistInt.erase(iterDel);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> *iterCurrent;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上述方法效率很低，其时间复杂度为O(m*n)。当m和n很大时候，很难在短时间内得出结果，不过好处就是可以给出n-1个人出圈的顺序，只需要在删除之前保存一下。</p>\n<h1 id=\"进阶解法\"><a href=\"#进阶解法\" class=\"headerlink\" title=\"进阶解法\"></a>进阶解法</h1><p>普通的解法之所以复杂度高，是因为我们不知道哪个节点会保留下来。所以需要不断遍历删除，直到剩下最后一个节点。如果我们不通过遍历，而是直接计算出最后活下来的节点是哪个，就可以降低时间复杂度。<br>推导过程如下：<br>如果只剩下一个节点，那么幸存的节点就是该节点，编号为1，Live(1)=1;<br>如果剩下两个节点，幸存的节点为Live(2);<br>如果剩下三个节点，幸存的节点为Live(3) ;<br>…<br>如果剩下i个节点，幸存的节点为Live(i);<br>…<br>如果剩下n个节点，幸存的节点为Live(n);</p>\n<p>我们已知Live(1)=1，如果确定Live(i-1)和Live(i)是什么关系，就可以递归过程求出Live(n)</p>\n<p>如果一个节点数为n的链表，编号从头结点到尾节点为1~n，如果删除编号为s的一个节点，剩下的节点编号将会怎么变化？如下图所示<br><img src=\"/images/Josephus/Josephus1.jpg\" alt=\"Josephus1\"><br>设原链表编号为y，删除一个节点之后的编号为x，那么我们可以得到以下的公式<br><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">y</span> = (x + s -<span class=\"number\">1</span>) % n + <span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<p>因此可以根据Live(i-1)以及被删除的节点编号来求得Live(i)的值，那么现在问题变成了如何求被删除节点的编号<br><img src=\"/images/Josephus/Josephus2.jpg\" alt=\"Josephus2\"><br>如图所示，对于每一个节点，如果报数值不到m，就会一直报数下去，1~n~2n~…由图我们可以得到报数值A与编号值B的关系，即<br><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">B</span> = (A - <span class=\"number\">1</span>) % n + <span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<p>如果报到m，报数的节点就是要删除的节点，那么该节点的编号根据公式可以得出<br><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">s</span> = (m - <span class=\"number\">1</span>) % n + <span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<p>得到s之后，我们可以通过上面第一步得出的关系<br><figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Live<span class=\"comment\">(i)</span> = <span class=\"comment\">(Live(i - 1)</span> + s - <span class=\"number\">1</span>) <span class=\"meta\">%</span> i + <span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<p>把s带入之后，两式合并，结果为<br><figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Live<span class=\"comment\">(i)</span> = <span class=\"comment\">(Live(i - 1)</span> + m - <span class=\"number\">1</span>) <span class=\"meta\">%</span> i + <span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<p>整个过程总结如下：<br>　　1、遍历链表，得到链表的节点数n，O(n)<br>　　2、根据n和m的值，以及上文推导的Live(i)与Live(i-1)的关系，递归求得幸存节点的编号。该递归是单决策递归且递归为n层，所以时间复杂度为O(n)<br>　　3、根据得到的幸存节点的编号，遍历链表找到该节点，O(n)<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">LastRemaining_Solution</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> n, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> m)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(n==<span class=\"number\">0</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            <span class=\"keyword\">return</span> (LastRemaining_Solution(n<span class=\"number\">-1</span>,m)+m)%n;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>约瑟夫斯问题（有时也称为约瑟夫斯置换），是一个出现在计算机科学和数学中的问题。在计算机编程的算法中，类似问题又称为约瑟夫环。<br>有n个囚犯站成一个圆圈，准备处决。首先从一个人开始，越过k-2个人（因为第一个人已经被越过），并杀掉第k个人。接着，再越过k-1个人，并杀掉第k个人。这个过程沿着圆圈一直进行，直到最终只剩下一个人留下，这个人就可以继续活着。<br>问题是，给定了n和k，一开始要站在什么地方才能避免被处决？<br>","more":"<br>这个问题是以弗拉维奥·约瑟夫斯命名的，它是1世纪的一名犹太历史学家。他在自己的日记中写道，他和他的40个战友被罗马军队包围在洞中。他们讨论是自杀还是被俘，最终决定自杀，并以抽签的方式决定谁杀掉谁。约瑟夫斯和另外一个人是最后两个留下的人。约瑟夫斯说服了那个人，他们将向罗马军队投降，不再自杀。约瑟夫斯把他的存活归因于运气或天意，他不知道是哪一个。<br>简化之后的问题就变成了，n个人（编号0~(n-1))，从0开始报数，报到(m-1)的退出，剩下的人继续从0开始报数。求胜利者的编号。 </p>\n<h1 id=\"一般解法\"><a href=\"#一般解法\" class=\"headerlink\" title=\"一般解法\"></a>一般解法</h1><p>非常容易想到的方法就是利用环链表来做，构建一个环链表，每个结点的编号为0, 1, …… n-1。每次从当前位置向前移动m-1步，然后删除这个结点。最后剩下的结点就是胜利者。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Josephus</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> m)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || m &lt; <span class=\"number\">1</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt; listInt;</div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> i;</div><div class=\"line\">\t<span class=\"comment\">//初始化链表</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">\t\tlistInt.push_back(i);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator iterCurrent = listInt.begin();</div><div class=\"line\">\t<span class=\"keyword\">while</span> (listInt.size() &gt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">//前进m-1步</span></div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; m - <span class=\"number\">1</span>; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (++iterCurrent == listInt.end())</div><div class=\"line\">\t\t\t\titerCurrent = listInt.begin();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">//临时保存删除的节点</span></div><div class=\"line\">\t\t<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator iterDel = iterCurrent;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (++iterCurrent == listInt.end())</div><div class=\"line\">\t\t\titerCurrent = listInt.begin();</div><div class=\"line\">\t\tlistInt.erase(iterDel);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> *iterCurrent;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上述方法效率很低，其时间复杂度为O(m*n)。当m和n很大时候，很难在短时间内得出结果，不过好处就是可以给出n-1个人出圈的顺序，只需要在删除之前保存一下。</p>\n<h1 id=\"进阶解法\"><a href=\"#进阶解法\" class=\"headerlink\" title=\"进阶解法\"></a>进阶解法</h1><p>普通的解法之所以复杂度高，是因为我们不知道哪个节点会保留下来。所以需要不断遍历删除，直到剩下最后一个节点。如果我们不通过遍历，而是直接计算出最后活下来的节点是哪个，就可以降低时间复杂度。<br>推导过程如下：<br>如果只剩下一个节点，那么幸存的节点就是该节点，编号为1，Live(1)=1;<br>如果剩下两个节点，幸存的节点为Live(2);<br>如果剩下三个节点，幸存的节点为Live(3) ;<br>…<br>如果剩下i个节点，幸存的节点为Live(i);<br>…<br>如果剩下n个节点，幸存的节点为Live(n);</p>\n<p>我们已知Live(1)=1，如果确定Live(i-1)和Live(i)是什么关系，就可以递归过程求出Live(n)</p>\n<p>如果一个节点数为n的链表，编号从头结点到尾节点为1~n，如果删除编号为s的一个节点，剩下的节点编号将会怎么变化？如下图所示<br><img src=\"/images/Josephus/Josephus1.jpg\" alt=\"Josephus1\"><br>设原链表编号为y，删除一个节点之后的编号为x，那么我们可以得到以下的公式<br><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">y</span> = (x + s -<span class=\"number\">1</span>) % n + <span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<p>因此可以根据Live(i-1)以及被删除的节点编号来求得Live(i)的值，那么现在问题变成了如何求被删除节点的编号<br><img src=\"/images/Josephus/Josephus2.jpg\" alt=\"Josephus2\"><br>如图所示，对于每一个节点，如果报数值不到m，就会一直报数下去，1~n~2n~…由图我们可以得到报数值A与编号值B的关系，即<br><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">B</span> = (A - <span class=\"number\">1</span>) % n + <span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<p>如果报到m，报数的节点就是要删除的节点，那么该节点的编号根据公式可以得出<br><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">s</span> = (m - <span class=\"number\">1</span>) % n + <span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<p>得到s之后，我们可以通过上面第一步得出的关系<br><figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Live<span class=\"comment\">(i)</span> = <span class=\"comment\">(Live(i - 1)</span> + s - <span class=\"number\">1</span>) <span class=\"meta\">%</span> i + <span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<p>把s带入之后，两式合并，结果为<br><figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Live<span class=\"comment\">(i)</span> = <span class=\"comment\">(Live(i - 1)</span> + m - <span class=\"number\">1</span>) <span class=\"meta\">%</span> i + <span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<p>整个过程总结如下：<br>　　1、遍历链表，得到链表的节点数n，O(n)<br>　　2、根据n和m的值，以及上文推导的Live(i)与Live(i-1)的关系，递归求得幸存节点的编号。该递归是单决策递归且递归为n层，所以时间复杂度为O(n)<br>　　3、根据得到的幸存节点的编号，遍历链表找到该节点，O(n)<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">LastRemaining_Solution</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> n, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> m)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(n==<span class=\"number\">0</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            <span class=\"keyword\">return</span> (LastRemaining_Solution(n<span class=\"number\">-1</span>,m)+m)%n;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>"},{"title":"C++中的虚函数和多态","date":"2018-01-28T08:28:26.000Z","_content":"<br>  面向对象程序设计(object-oriented programming)的核心思想是数据抽象、继承和动态绑定。    通过使用数据抽象，可以将类的接口与实现分离；使用继承，可以定义相似的类型并对其相似关系建模；使用动态绑定，可以在一定程度上忽略相似类型的区别，而已统一的方式使用他们的对象。<!--more--><br>\nOOP的核心思想是多态性(Ploymorphism)。多态这个词源于希腊语，其含义是“多种形式”。我们把具有继承关系的多个类型称为多态类型，因为我们能够使用这些类型的“多种类型”而无须在意他们的差异。引用或指针的静态类型与动态类型不同这一事实正是支持C++语言支持多态性的根本所在。<br>\n当我们使用基类的引用或者指针调用基类中定义的一个函数时，我们并不知道该函数真正的作用的对象是什么类型，因为它可能是一个基类的对象也可能是一个派生类的对象。如果该函数是虚函数，则直到运行时彩会决定到底执行哪个版本的函数，判断的依据是引用或者指针所绑定的对象的真实类型。<br>\n另一方面，对非虚函数的调用在编译时进行绑定。类似的，通过对象进行的函数(虚函数或者非虚函数)调用也在编译时绑定。对象的类型是确定不变的，我们无论如何都不可能令对象的动态类型与静态类型不一致。因此，通过对象进行的函数调用将在编译时绑定到该对象所属类中的函数版本上。<br>\n**当且仅当对通过指针或引用调用虚函数时，才会在运行时解析该调用，也只有在这种情况下对象的动态类型才有可能与静态类型不同。**\n# 虚函数\n虚函数通过`virtual`关键字来声明。\n{% codeblock lang: C++ %}\nclass CPerson{\n    public:\n        virtual vlid hello(){\n            cout<<\"I'm a person.\"<<endl;\n        }\n};\nclass CMan:public CPerson{\n    public:\n        //子类中不用声明virtual\n        void hello(){\n            cout<<\"I'm a man.\"<<endl;\n        }\n};\n\nint main(){\n    CPerson *p = new CMan();\n    p->hello();\n    //I'm a man.\n    return 0;\n}\n{% endcodeblock %}\n上述代码中，通过基类指针调用虚函数时，子类的同名函数得到了执行。多态在C++中有三种形态：\n1.通过基类指针调用基类和子类的同名函数时，会调用对象的实际类型中的虚函数。\n2.通过基类引用调用基类和子类的同名函数时，会调用对象的实际类型中的虚函数。\n3.基类或子类的成员函数中调用基类和子类的同名虚函数时，会调用对象的实际类型中的虚函数。\n\n# 纯虚函数\n我们可以在函数体的位置(即在声明语句的分号之前)书写`=0`就可以将一个虚函数说明为纯虚函数。其中`=0`只能出现在类内部的虚函数声明语句处。包含纯虚函数的类不允许实例化，称为**抽象类**。事实上纯虚函数提供了面向对象中接口的功能。当然，这样的接口是以继承的方式实现的。\n{% codeblock lang: C++ %}\nclass CPerson{\n    public:\n        virtual void hello() = 0;\n};\n\nCPerson p; //compile error\n{% endcodeblock %}\n注意空方法、纯虚函数、方法声明的区别。类声明中的空方法给出了方法声明+方法定义。只声明但没有定义的方法将会产生链接错误，无论是否被调用过。\n# 访问级别\n虚函数的调用会在运行时动态匹配当前类型，然而成员函数的访问性检查是语法检查的一部分，在编译期完成。如果虚函数在父类中是`private`，即使在子类中是`public`，也不可以通过父类指针调用它：\n{% codeblock lang: C++ %}\nclass CPerson{\n    virtual void hello();\n};\nclass CMan:public CPerson{\n    public:\n        virtual void hello();\n};\n\nCPerson *p = new CMan();\np->hello(); //编译出错\n{% endcodeblock %}\n# 虚析构函数\n虚函数的机制使得我们可以通过更加通用的基类指针来操作对象。然而使用基类指针来`delete`对象则面临着问题。\n\n{% codeblock lang: C++ %}\nCPerson *p = new CMan();\ndelete p;\n{% endcodeblock %}\n\n上述代码只会回收`CMan`中`CPerson`部分所占用的内存，执行了`CPerson`的析构函数，却没有执行`CMan`的虚构函数。解决方法很直观，将析构函数设为`virtual`。\n>构造函数不允许是虚函数，编译错。\n\n{% codeblock lang: C++ %}\nclass CPerson{\n    public:\n        virtual ~CPerson(){};\n};\nclass CMan:public CPerson{\n    public:\n        ~CMan(){};\n};\n\nCPerson *p = new CMan();\ndelete p;\n{% endcodeblock %}\n这样，`delete`时会先调用`~CMan()`再调用`~CPerson()`。\n# 构造函数调用虚函数\n当执行构造函数时，当前对象的类型为构造函数所属的类。所以在构造函数中调用虚函数和调用普通函数是一样的，不会动态联编，被调用的函数来自自己活着基类。\n{% codeblock lang: C++ %}\nclass CPerson{\n    public:\n        virtual void hello(){\n            cout<<\"I'm a person.\"<<endl;\n        }\n        virtual void bye(){\n            cout<<\"Bye, person.\"<<endl;\n        }\n};\nclass CMan:public CPerson{\n    public:\n        CMan(){\n            hello();\n            bye();\n        }\n        void hello(){\n            cout<<\"I'm a man.\"<<endl;\n        }\n};\nclass CReek:public CMan{\n    public:\n        void hello(){\n            cout<<\"I'm a reek.\"<<endl;\n        }\n        void bye(){\n            cout<<\"Bye, reek.\"<<endl;\n        }\n};\n\nint main(){\n    CReek r;\n    return 0;\n}\n{% endcodeblock %}\n上述的调用结果是：\n{% codeblock lang: C++ %}\nI'm a man.\nBye, Person.\n{% endcodeblock %}\n\n`hello`和`bye`都是虚函数，其中`hello`三个层级都有定义，但被执行的是当前类`CMan`中的定义；`bye`在上下两个层级中有定义，被执行的是上一级`CPerson`中的定义。可见，构造函数执行时当前对象的类型是定义构造函数的类。  ","source":"_posts/2018-01-28-virtualFunctionAndPloymorphism.md","raw":"---\ntitle: C++中的虚函数和多态\ndate: 2018-01-28 16:28:26\ntags:\n- C++\n- 虚函数\n- 多态\ncategories:\n- 技术\n---\n<br>  面向对象程序设计(object-oriented programming)的核心思想是数据抽象、继承和动态绑定。    通过使用数据抽象，可以将类的接口与实现分离；使用继承，可以定义相似的类型并对其相似关系建模；使用动态绑定，可以在一定程度上忽略相似类型的区别，而已统一的方式使用他们的对象。<!--more--><br>\nOOP的核心思想是多态性(Ploymorphism)。多态这个词源于希腊语，其含义是“多种形式”。我们把具有继承关系的多个类型称为多态类型，因为我们能够使用这些类型的“多种类型”而无须在意他们的差异。引用或指针的静态类型与动态类型不同这一事实正是支持C++语言支持多态性的根本所在。<br>\n当我们使用基类的引用或者指针调用基类中定义的一个函数时，我们并不知道该函数真正的作用的对象是什么类型，因为它可能是一个基类的对象也可能是一个派生类的对象。如果该函数是虚函数，则直到运行时彩会决定到底执行哪个版本的函数，判断的依据是引用或者指针所绑定的对象的真实类型。<br>\n另一方面，对非虚函数的调用在编译时进行绑定。类似的，通过对象进行的函数(虚函数或者非虚函数)调用也在编译时绑定。对象的类型是确定不变的，我们无论如何都不可能令对象的动态类型与静态类型不一致。因此，通过对象进行的函数调用将在编译时绑定到该对象所属类中的函数版本上。<br>\n**当且仅当对通过指针或引用调用虚函数时，才会在运行时解析该调用，也只有在这种情况下对象的动态类型才有可能与静态类型不同。**\n# 虚函数\n虚函数通过`virtual`关键字来声明。\n{% codeblock lang: C++ %}\nclass CPerson{\n    public:\n        virtual vlid hello(){\n            cout<<\"I'm a person.\"<<endl;\n        }\n};\nclass CMan:public CPerson{\n    public:\n        //子类中不用声明virtual\n        void hello(){\n            cout<<\"I'm a man.\"<<endl;\n        }\n};\n\nint main(){\n    CPerson *p = new CMan();\n    p->hello();\n    //I'm a man.\n    return 0;\n}\n{% endcodeblock %}\n上述代码中，通过基类指针调用虚函数时，子类的同名函数得到了执行。多态在C++中有三种形态：\n1.通过基类指针调用基类和子类的同名函数时，会调用对象的实际类型中的虚函数。\n2.通过基类引用调用基类和子类的同名函数时，会调用对象的实际类型中的虚函数。\n3.基类或子类的成员函数中调用基类和子类的同名虚函数时，会调用对象的实际类型中的虚函数。\n\n# 纯虚函数\n我们可以在函数体的位置(即在声明语句的分号之前)书写`=0`就可以将一个虚函数说明为纯虚函数。其中`=0`只能出现在类内部的虚函数声明语句处。包含纯虚函数的类不允许实例化，称为**抽象类**。事实上纯虚函数提供了面向对象中接口的功能。当然，这样的接口是以继承的方式实现的。\n{% codeblock lang: C++ %}\nclass CPerson{\n    public:\n        virtual void hello() = 0;\n};\n\nCPerson p; //compile error\n{% endcodeblock %}\n注意空方法、纯虚函数、方法声明的区别。类声明中的空方法给出了方法声明+方法定义。只声明但没有定义的方法将会产生链接错误，无论是否被调用过。\n# 访问级别\n虚函数的调用会在运行时动态匹配当前类型，然而成员函数的访问性检查是语法检查的一部分，在编译期完成。如果虚函数在父类中是`private`，即使在子类中是`public`，也不可以通过父类指针调用它：\n{% codeblock lang: C++ %}\nclass CPerson{\n    virtual void hello();\n};\nclass CMan:public CPerson{\n    public:\n        virtual void hello();\n};\n\nCPerson *p = new CMan();\np->hello(); //编译出错\n{% endcodeblock %}\n# 虚析构函数\n虚函数的机制使得我们可以通过更加通用的基类指针来操作对象。然而使用基类指针来`delete`对象则面临着问题。\n\n{% codeblock lang: C++ %}\nCPerson *p = new CMan();\ndelete p;\n{% endcodeblock %}\n\n上述代码只会回收`CMan`中`CPerson`部分所占用的内存，执行了`CPerson`的析构函数，却没有执行`CMan`的虚构函数。解决方法很直观，将析构函数设为`virtual`。\n>构造函数不允许是虚函数，编译错。\n\n{% codeblock lang: C++ %}\nclass CPerson{\n    public:\n        virtual ~CPerson(){};\n};\nclass CMan:public CPerson{\n    public:\n        ~CMan(){};\n};\n\nCPerson *p = new CMan();\ndelete p;\n{% endcodeblock %}\n这样，`delete`时会先调用`~CMan()`再调用`~CPerson()`。\n# 构造函数调用虚函数\n当执行构造函数时，当前对象的类型为构造函数所属的类。所以在构造函数中调用虚函数和调用普通函数是一样的，不会动态联编，被调用的函数来自自己活着基类。\n{% codeblock lang: C++ %}\nclass CPerson{\n    public:\n        virtual void hello(){\n            cout<<\"I'm a person.\"<<endl;\n        }\n        virtual void bye(){\n            cout<<\"Bye, person.\"<<endl;\n        }\n};\nclass CMan:public CPerson{\n    public:\n        CMan(){\n            hello();\n            bye();\n        }\n        void hello(){\n            cout<<\"I'm a man.\"<<endl;\n        }\n};\nclass CReek:public CMan{\n    public:\n        void hello(){\n            cout<<\"I'm a reek.\"<<endl;\n        }\n        void bye(){\n            cout<<\"Bye, reek.\"<<endl;\n        }\n};\n\nint main(){\n    CReek r;\n    return 0;\n}\n{% endcodeblock %}\n上述的调用结果是：\n{% codeblock lang: C++ %}\nI'm a man.\nBye, Person.\n{% endcodeblock %}\n\n`hello`和`bye`都是虚函数，其中`hello`三个层级都有定义，但被执行的是当前类`CMan`中的定义；`bye`在上下两个层级中有定义，被执行的是上一级`CPerson`中的定义。可见，构造函数执行时当前对象的类型是定义构造函数的类。  ","slug":"virtualFunctionAndPloymorphism","published":1,"updated":"2018-03-28T13:19:43.043Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfb4bqdn0008jl0rf74fgoj9","content":"<p><br>  面向对象程序设计(object-oriented programming)的核心思想是数据抽象、继承和动态绑定。    通过使用数据抽象，可以将类的接口与实现分离；使用继承，可以定义相似的类型并对其相似关系建模；使用动态绑定，可以在一定程度上忽略相似类型的区别，而已统一的方式使用他们的对象。<a id=\"more\"></a><br><br>OOP的核心思想是多态性(Ploymorphism)。多态这个词源于希腊语，其含义是“多种形式”。我们把具有继承关系的多个类型称为多态类型，因为我们能够使用这些类型的“多种类型”而无须在意他们的差异。引用或指针的静态类型与动态类型不同这一事实正是支持C++语言支持多态性的根本所在。<br><br>当我们使用基类的引用或者指针调用基类中定义的一个函数时，我们并不知道该函数真正的作用的对象是什么类型，因为它可能是一个基类的对象也可能是一个派生类的对象。如果该函数是虚函数，则直到运行时彩会决定到底执行哪个版本的函数，判断的依据是引用或者指针所绑定的对象的真实类型。<br><br>另一方面，对非虚函数的调用在编译时进行绑定。类似的，通过对象进行的函数(虚函数或者非虚函数)调用也在编译时绑定。对象的类型是确定不变的，我们无论如何都不可能令对象的动态类型与静态类型不一致。因此，通过对象进行的函数调用将在编译时绑定到该对象所属类中的函数版本上。<br><br><strong>当且仅当对通过指针或引用调用虚函数时，才会在运行时解析该调用，也只有在这种情况下对象的动态类型才有可能与静态类型不同。</strong></p>\n<h1 id=\"虚函数\"><a href=\"#虚函数\" class=\"headerlink\" title=\"虚函数\"></a>虚函数</h1><p>虚函数通过<code>virtual</code>关键字来声明。<br><figure class=\"highlight cpp\"><figcaption><span>lang: C++</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CPerson</span>&#123;</span></div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">virtual</span> vlid <span class=\"title\">hello</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"I'm a person.\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CMan</span>:</span><span class=\"keyword\">public</span> CPerson&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">        <span class=\"comment\">//子类中不用声明virtual</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">hello</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"I'm a man.\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    CPerson *p = <span class=\"keyword\">new</span> CMan();</div><div class=\"line\">    p-&gt;hello();</div><div class=\"line\">    <span class=\"comment\">//I'm a man.</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br>上述代码中，通过基类指针调用虚函数时，子类的同名函数得到了执行。多态在C++中有三种形态：<br>1.通过基类指针调用基类和子类的同名函数时，会调用对象的实际类型中的虚函数。<br>2.通过基类引用调用基类和子类的同名函数时，会调用对象的实际类型中的虚函数。<br>3.基类或子类的成员函数中调用基类和子类的同名虚函数时，会调用对象的实际类型中的虚函数。</p>\n<h1 id=\"纯虚函数\"><a href=\"#纯虚函数\" class=\"headerlink\" title=\"纯虚函数\"></a>纯虚函数</h1><p>我们可以在函数体的位置(即在声明语句的分号之前)书写<code>=0</code>就可以将一个虚函数说明为纯虚函数。其中<code>=0</code>只能出现在类内部的虚函数声明语句处。包含纯虚函数的类不允许实例化，称为<strong>抽象类</strong>。事实上纯虚函数提供了面向对象中接口的功能。当然，这样的接口是以继承的方式实现的。<br><figure class=\"highlight cpp\"><figcaption><span>lang: C++</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CPerson</span>&#123;</span></div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">hello</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">CPerson p; <span class=\"comment\">//compile error</span></div></pre></td></tr></table></figure><br>注意空方法、纯虚函数、方法声明的区别。类声明中的空方法给出了方法声明+方法定义。只声明但没有定义的方法将会产生链接错误，无论是否被调用过。</p>\n<h1 id=\"访问级别\"><a href=\"#访问级别\" class=\"headerlink\" title=\"访问级别\"></a>访问级别</h1><p>虚函数的调用会在运行时动态匹配当前类型，然而成员函数的访问性检查是语法检查的一部分，在编译期完成。如果虚函数在父类中是<code>private</code>，即使在子类中是<code>public</code>，也不可以通过父类指针调用它：<br><figure class=\"highlight cpp\"><figcaption><span>lang: C++</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CPerson</span>&#123;</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">hello</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CMan</span>:</span><span class=\"keyword\">public</span> CPerson&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">hello</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">CPerson *p = <span class=\"keyword\">new</span> CMan();</div><div class=\"line\">p-&gt;hello(); <span class=\"comment\">//编译出错</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"虚析构函数\"><a href=\"#虚析构函数\" class=\"headerlink\" title=\"虚析构函数\"></a>虚析构函数</h1><p>虚函数的机制使得我们可以通过更加通用的基类指针来操作对象。然而使用基类指针来<code>delete</code>对象则面临着问题。</p>\n<figure class=\"highlight abnf\"><figcaption><span>lang: C++</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">CPerson *p = new CMan()<span class=\"comment\">;</span></div><div class=\"line\">delete p<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>上述代码只会回收<code>CMan</code>中<code>CPerson</code>部分所占用的内存，执行了<code>CPerson</code>的析构函数，却没有执行<code>CMan</code>的虚构函数。解决方法很直观，将析构函数设为<code>virtual</code>。</p>\n<blockquote>\n<p>构造函数不允许是虚函数，编译错。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption><span>lang: C++</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CPerson</span>&#123;</span></div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">        <span class=\"keyword\">virtual</span> ~CPerson()&#123;&#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CMan</span>:</span><span class=\"keyword\">public</span> CPerson&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">        ~CMan()&#123;&#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">CPerson *p = <span class=\"keyword\">new</span> CMan();</div><div class=\"line\"><span class=\"keyword\">delete</span> p;</div></pre></td></tr></table></figure>\n<p>这样，<code>delete</code>时会先调用<code>~CMan()</code>再调用<code>~CPerson()</code>。</p>\n<h1 id=\"构造函数调用虚函数\"><a href=\"#构造函数调用虚函数\" class=\"headerlink\" title=\"构造函数调用虚函数\"></a>构造函数调用虚函数</h1><p>当执行构造函数时，当前对象的类型为构造函数所属的类。所以在构造函数中调用虚函数和调用普通函数是一样的，不会动态联编，被调用的函数来自自己活着基类。<br><figure class=\"highlight cpp\"><figcaption><span>lang: C++</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CPerson</span>&#123;</span></div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">hello</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"I'm a person.\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">bye</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Bye, person.\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CMan</span>:</span><span class=\"keyword\">public</span> CPerson&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">        CMan()&#123;</div><div class=\"line\">            hello();</div><div class=\"line\">            bye();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">hello</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"I'm a man.\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CReek</span>:</span><span class=\"keyword\">public</span> CMan&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">hello</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"I'm a reek.\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bye</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Bye, reek.\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    CReek r;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br>上述的调用结果是：<br><figure class=\"highlight erlang\"><figcaption><span>lang: C++</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">I'm a man.</div><div class=\"line\">Bye, Person.</div></pre></td></tr></table></figure></p>\n<p><code>hello</code>和<code>bye</code>都是虚函数，其中<code>hello</code>三个层级都有定义，但被执行的是当前类<code>CMan</code>中的定义；<code>bye</code>在上下两个层级中有定义，被执行的是上一级<code>CPerson</code>中的定义。可见，构造函数执行时当前对象的类型是定义构造函数的类。  </p>\n","site":{"data":{}},"excerpt":"<p><br>  面向对象程序设计(object-oriented programming)的核心思想是数据抽象、继承和动态绑定。    通过使用数据抽象，可以将类的接口与实现分离；使用继承，可以定义相似的类型并对其相似关系建模；使用动态绑定，可以在一定程度上忽略相似类型的区别，而已统一的方式使用他们的对象。","more":"<br><br>OOP的核心思想是多态性(Ploymorphism)。多态这个词源于希腊语，其含义是“多种形式”。我们把具有继承关系的多个类型称为多态类型，因为我们能够使用这些类型的“多种类型”而无须在意他们的差异。引用或指针的静态类型与动态类型不同这一事实正是支持C++语言支持多态性的根本所在。<br><br>当我们使用基类的引用或者指针调用基类中定义的一个函数时，我们并不知道该函数真正的作用的对象是什么类型，因为它可能是一个基类的对象也可能是一个派生类的对象。如果该函数是虚函数，则直到运行时彩会决定到底执行哪个版本的函数，判断的依据是引用或者指针所绑定的对象的真实类型。<br><br>另一方面，对非虚函数的调用在编译时进行绑定。类似的，通过对象进行的函数(虚函数或者非虚函数)调用也在编译时绑定。对象的类型是确定不变的，我们无论如何都不可能令对象的动态类型与静态类型不一致。因此，通过对象进行的函数调用将在编译时绑定到该对象所属类中的函数版本上。<br><br><strong>当且仅当对通过指针或引用调用虚函数时，才会在运行时解析该调用，也只有在这种情况下对象的动态类型才有可能与静态类型不同。</strong></p>\n<h1 id=\"虚函数\"><a href=\"#虚函数\" class=\"headerlink\" title=\"虚函数\"></a>虚函数</h1><p>虚函数通过<code>virtual</code>关键字来声明。<br><figure class=\"highlight cpp\"><figcaption><span>lang: C++</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CPerson</span>&#123;</span></div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">virtual</span> vlid <span class=\"title\">hello</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"I'm a person.\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CMan</span>:</span><span class=\"keyword\">public</span> CPerson&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">        <span class=\"comment\">//子类中不用声明virtual</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">hello</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"I'm a man.\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    CPerson *p = <span class=\"keyword\">new</span> CMan();</div><div class=\"line\">    p-&gt;hello();</div><div class=\"line\">    <span class=\"comment\">//I'm a man.</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br>上述代码中，通过基类指针调用虚函数时，子类的同名函数得到了执行。多态在C++中有三种形态：<br>1.通过基类指针调用基类和子类的同名函数时，会调用对象的实际类型中的虚函数。<br>2.通过基类引用调用基类和子类的同名函数时，会调用对象的实际类型中的虚函数。<br>3.基类或子类的成员函数中调用基类和子类的同名虚函数时，会调用对象的实际类型中的虚函数。</p>\n<h1 id=\"纯虚函数\"><a href=\"#纯虚函数\" class=\"headerlink\" title=\"纯虚函数\"></a>纯虚函数</h1><p>我们可以在函数体的位置(即在声明语句的分号之前)书写<code>=0</code>就可以将一个虚函数说明为纯虚函数。其中<code>=0</code>只能出现在类内部的虚函数声明语句处。包含纯虚函数的类不允许实例化，称为<strong>抽象类</strong>。事实上纯虚函数提供了面向对象中接口的功能。当然，这样的接口是以继承的方式实现的。<br><figure class=\"highlight cpp\"><figcaption><span>lang: C++</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CPerson</span>&#123;</span></div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">hello</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">CPerson p; <span class=\"comment\">//compile error</span></div></pre></td></tr></table></figure><br>注意空方法、纯虚函数、方法声明的区别。类声明中的空方法给出了方法声明+方法定义。只声明但没有定义的方法将会产生链接错误，无论是否被调用过。</p>\n<h1 id=\"访问级别\"><a href=\"#访问级别\" class=\"headerlink\" title=\"访问级别\"></a>访问级别</h1><p>虚函数的调用会在运行时动态匹配当前类型，然而成员函数的访问性检查是语法检查的一部分，在编译期完成。如果虚函数在父类中是<code>private</code>，即使在子类中是<code>public</code>，也不可以通过父类指针调用它：<br><figure class=\"highlight cpp\"><figcaption><span>lang: C++</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CPerson</span>&#123;</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">hello</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CMan</span>:</span><span class=\"keyword\">public</span> CPerson&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">hello</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">CPerson *p = <span class=\"keyword\">new</span> CMan();</div><div class=\"line\">p-&gt;hello(); <span class=\"comment\">//编译出错</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"虚析构函数\"><a href=\"#虚析构函数\" class=\"headerlink\" title=\"虚析构函数\"></a>虚析构函数</h1><p>虚函数的机制使得我们可以通过更加通用的基类指针来操作对象。然而使用基类指针来<code>delete</code>对象则面临着问题。</p>\n<figure class=\"highlight abnf\"><figcaption><span>lang: C++</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">CPerson *p = new CMan()<span class=\"comment\">;</span></div><div class=\"line\">delete p<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>上述代码只会回收<code>CMan</code>中<code>CPerson</code>部分所占用的内存，执行了<code>CPerson</code>的析构函数，却没有执行<code>CMan</code>的虚构函数。解决方法很直观，将析构函数设为<code>virtual</code>。</p>\n<blockquote>\n<p>构造函数不允许是虚函数，编译错。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption><span>lang: C++</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CPerson</span>&#123;</span></div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">        <span class=\"keyword\">virtual</span> ~CPerson()&#123;&#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CMan</span>:</span><span class=\"keyword\">public</span> CPerson&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">        ~CMan()&#123;&#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">CPerson *p = <span class=\"keyword\">new</span> CMan();</div><div class=\"line\"><span class=\"keyword\">delete</span> p;</div></pre></td></tr></table></figure>\n<p>这样，<code>delete</code>时会先调用<code>~CMan()</code>再调用<code>~CPerson()</code>。</p>\n<h1 id=\"构造函数调用虚函数\"><a href=\"#构造函数调用虚函数\" class=\"headerlink\" title=\"构造函数调用虚函数\"></a>构造函数调用虚函数</h1><p>当执行构造函数时，当前对象的类型为构造函数所属的类。所以在构造函数中调用虚函数和调用普通函数是一样的，不会动态联编，被调用的函数来自自己活着基类。<br><figure class=\"highlight cpp\"><figcaption><span>lang: C++</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CPerson</span>&#123;</span></div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">hello</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"I'm a person.\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">bye</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Bye, person.\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CMan</span>:</span><span class=\"keyword\">public</span> CPerson&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">        CMan()&#123;</div><div class=\"line\">            hello();</div><div class=\"line\">            bye();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">hello</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"I'm a man.\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CReek</span>:</span><span class=\"keyword\">public</span> CMan&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">hello</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"I'm a reek.\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bye</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Bye, reek.\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    CReek r;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br>上述的调用结果是：<br><figure class=\"highlight erlang\"><figcaption><span>lang: C++</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">I'm a man.</div><div class=\"line\">Bye, Person.</div></pre></td></tr></table></figure></p>\n<p><code>hello</code>和<code>bye</code>都是虚函数，其中<code>hello</code>三个层级都有定义，但被执行的是当前类<code>CMan</code>中的定义；<code>bye</code>在上下两个层级中有定义，被执行的是上一级<code>CPerson</code>中的定义。可见，构造函数执行时当前对象的类型是定义构造函数的类。  </p>"},{"title":"C++中的指针","date":"2018-01-30T11:08:33.000Z","_content":"","source":"_posts/2018-01-30-pointInCPP.md","raw":"---\ntitle: C++中的指针\ndate: 2018-01-30 19:08:33\ntags:\n- C++\n- 指针\ncategories:\n- 技术\n---\n","slug":"pointInCPP","published":1,"updated":"2018-03-28T11:10:32.564Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfb4bqdo000ajl0rfc283mbr","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Docker简介及使用","date":"2018-03-27T10:28:20.000Z","_content":"\nDocker，这个名词第一次听到是从浩哥那里。大概是去年秋天的时候，浩哥让我在服务器上使用docker撘一个内网穿透frp服务器，用来做树莓派的公网访问。后来由于不再使用树莓派也没有再继续了解下去。最近在V站也经常看到关于Docker的帖子，看起来还是蛮有用的，先挖个坑，毕业之前补完。","source":"_posts/2018-03-27-docker-tutorial.md","raw":"---\ntitle: Docker简介及使用\ndate: 2018-03-27 18:28:20\ntags:\n- docker\n- Linux\ncategories:\n- 技术\n---\n\nDocker，这个名词第一次听到是从浩哥那里。大概是去年秋天的时候，浩哥让我在服务器上使用docker撘一个内网穿透frp服务器，用来做树莓派的公网访问。后来由于不再使用树莓派也没有再继续了解下去。最近在V站也经常看到关于Docker的帖子，看起来还是蛮有用的，先挖个坑，毕业之前补完。","slug":"docker-tutorial","published":1,"updated":"2018-03-27T18:06:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfb4bqdp000cjl0rxsvsvc6q","content":"<p>Docker，这个名词第一次听到是从浩哥那里。大概是去年秋天的时候，浩哥让我在服务器上使用docker撘一个内网穿透frp服务器，用来做树莓派的公网访问。后来由于不再使用树莓派也没有再继续了解下去。最近在V站也经常看到关于Docker的帖子，看起来还是蛮有用的，先挖个坑，毕业之前补完。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Docker，这个名词第一次听到是从浩哥那里。大概是去年秋天的时候，浩哥让我在服务器上使用docker撘一个内网穿透frp服务器，用来做树莓派的公网访问。后来由于不再使用树莓派也没有再继续了解下去。最近在V站也经常看到关于Docker的帖子，看起来还是蛮有用的，先挖个坑，毕业之前补完。</p>\n"},{"title":"Hexo博客GitHub备份，还有一些常用Git操作","date":"2018-03-24T17:30:32.000Z","_content":"年后换了电脑，博客的文件也从旧电脑转到了新的电脑上面，但是总觉得这种方式很不方便，把文件拷来拷去。<br>\n由于博客是发布在GitHubPages上的，就想能不能把博客的生成文件也传到GitHub上。但是这样又出现一个新的问题，一个博客我要用两个仓库来存。突然想起来Git的branch，这岂不是正好用来存储源文件和生成的静态文件？<!--more-->\n首先在仓库新建一个Branch，我这里就直接命名为Hexo了，作为Hexo源文件的备份分支。然后把这个分支设置为默认分支，这样写完博客之后直接把源文件git push到GitHub的仓库中，再也不怕硬盘坏掉或者换电脑了。需要这些源文件的时候git clone下来，然后依次执行\n{% codeblock %}\nnpm install -g hexo-cli\nnpm install hexo\nnpm install\n{% endcodeblock %}\n这样环境就跟之前一模一样了。\n![branch](/images/BackUpHexoAndGit/hexo-backup.png)\n最近也在学习使用Git了，这个工具真的很强大，后悔没有早点开始使用，在自己的服务器上也搭建了一个Git仓库，记录一些常用的命令：\n一般来说日常使用只需要记住下图六个命令。\n![GitCommand](/images/BackUpHexoAndGit/GitCommand.png)\n下面是常用的Git命令清单：\n# 新建代码仓库\n{% codeblock %}\n# 在当前目录新建一个Git代码库\n$ git init\n\n# 新建一个目录，将其初始化为Git代码库\n$ git init [project-name]\n\n# 下载一个项目和它的整个代码历史\n$ git clone [curl]\n{% endcodeblock %}\n\n# 配置\nGit的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）\n{% codeblock %}\n# 显示当前的Git配置\n$ git config --list\n\n# 编辑Git配置文件\n$ git config -e [--global]\n\n# 设置提交代码时用户信息\ngit config [--global] user.name \"name\"\ngit config [--global] user.email \"eamil_adress\"\n{% endcodeblock %}\n\n# 增加/删除文件\n{% codeblock %}\n# 添加指定文件到暂存区\ngit add [file1] [file2] ...\n\n# 添加指定目录到暂存区，包括子目录\ngit add [dir]\n\n# 添加当前目录的所有文件到暂存区\n$ git add .\n\n# 添加每个变化前，都会要求确认\n# 对于同一个文件的多处变化，可以实现分次提交\n$ git add -p\n\n# 删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1] [file2] ...\n\n# 停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file]\n\n# 改名文件，并且将这个改名放入暂存区\n$ git mv [file-original] [file-renamed]\n{% endcodeblock %}\n\n# 代码提交\n{% codeblock %}\n# 提交暂存区到仓库区\n$ git commit -m [message]\n\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n# 提交时显示所有diff信息\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n{% endcodeblock %}\n\n# 分支\n{% codeblock %}\n# 列出所有本地分支\n$ git branch\n\n# 列出所有远程分支\n$ git branch -r\n\n# 列出所有本地分支和远程分支\n$ git branch -a\n\n# 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n\n# 新建一个分支，并切换到该分支\n$ git checkout -b [branch]\n\n# 新建一个分支，指向指定commit\n$ git branch [branch] [commit]\n\n# 新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch] [remote-branch]\n\n# 切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n\n# 切换到上一个分支\n$ git checkout -\n\n# 建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch] [remote-branch]\n\n# 合并指定分支到当前分支\n$ git merge [branch]\n\n# 选择一个commit，合并进当前分支\n$ git cherry-pick [commit]\n\n# 删除分支\n$ git branch -d [branch-name]\n\n# 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n{% endcodeblock %}\n\n# 标签\n{% codeblock %}\n# 列出所有tag\n$ git tag\n\n# 新建一个tag在当前commit\n$ git tag [tag]\n\n# 新建一个tag在指定commit\n$ git tag [tag] [commit]\n\n# 删除本地tag\n$ git tag -d [tag]\n\n# 删除远程tag\n$ git push origin :refs/tags/[tagName]\n\n# 查看tag信息\n$ git show [tag]\n\n# 提交指定tag\n$ git push [remote] [tag]\n\n# 提交所有tag\n$ git push [remote] --tags\n\n# 新建一个分支，指向某个tag\n$ git checkout -b [branch] [tag]\n{% endcodeblock %}\n\n# 查看信息\n{% codeblock %}\n# 显示有变更的文件\n$ git status\n\n# 显示当前分支的版本历史\n$ git log\n\n# 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n\n# 搜索提交历史，根据关键词\n$ git log -S [keyword]\n\n# 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] HEAD --pretty=format:%s\n\n# 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\n$ git log [tag] HEAD --grep feature\n\n# 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]\n\n# 显示指定文件相关的每一次diff\n$ git log -p [file]\n\n# 显示过去5次提交\n$ git log -5 --pretty --oneline\n\n# 显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn\n\n# 显示指定文件是什么人在什么时间修改过\n$ git blame [file]\n\n# 显示暂存区和工作区的差异\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\n\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\n# 显示今天你写了多少行代码\n$ git diff --shortstat \"@{0 day ago}\"\n\n# 显示某次提交的元数据和内容变化\n$ git show [commit]\n\n# 显示某次提交发生变化的文件\n$ git show --name-only [commit]\n\n# 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]\n\n# 显示当前分支的最近几次提交\n$ git reflog\n{% endcodeblock %}\n\n# 远程同步\n{% codeblock %}\n# 下载远程仓库的所有变动\n$ git fetch [remote]\n\n# 显示所有远程仓库\n$ git remote -v\n\n# 显示某个远程仓库的信息\n$ git remote show [remote]\n\n# 增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url]\n\n# 取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch]\n\n# 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n\n# 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force\n\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n{% endcodeblock %}\n\n# 撤销\n{% codeblock %}\n# 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n\n# 暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n{% endcodeblock %}\n\n\n\n参考链接：\n[常用Git命令清单](http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html)\n\n\n\n\n","source":"_posts/2018-03-25-BackUpHexoAndGit.md","raw":"---\ntitle: Hexo博客GitHub备份，还有一些常用Git操作\ndate: 2018-03-25 01:30:32\ntags:\n- Hexo\n- GitHub\n- Git\ncategories:\n- 技术\n---\n年后换了电脑，博客的文件也从旧电脑转到了新的电脑上面，但是总觉得这种方式很不方便，把文件拷来拷去。<br>\n由于博客是发布在GitHubPages上的，就想能不能把博客的生成文件也传到GitHub上。但是这样又出现一个新的问题，一个博客我要用两个仓库来存。突然想起来Git的branch，这岂不是正好用来存储源文件和生成的静态文件？<!--more-->\n首先在仓库新建一个Branch，我这里就直接命名为Hexo了，作为Hexo源文件的备份分支。然后把这个分支设置为默认分支，这样写完博客之后直接把源文件git push到GitHub的仓库中，再也不怕硬盘坏掉或者换电脑了。需要这些源文件的时候git clone下来，然后依次执行\n{% codeblock %}\nnpm install -g hexo-cli\nnpm install hexo\nnpm install\n{% endcodeblock %}\n这样环境就跟之前一模一样了。\n![branch](/images/BackUpHexoAndGit/hexo-backup.png)\n最近也在学习使用Git了，这个工具真的很强大，后悔没有早点开始使用，在自己的服务器上也搭建了一个Git仓库，记录一些常用的命令：\n一般来说日常使用只需要记住下图六个命令。\n![GitCommand](/images/BackUpHexoAndGit/GitCommand.png)\n下面是常用的Git命令清单：\n# 新建代码仓库\n{% codeblock %}\n# 在当前目录新建一个Git代码库\n$ git init\n\n# 新建一个目录，将其初始化为Git代码库\n$ git init [project-name]\n\n# 下载一个项目和它的整个代码历史\n$ git clone [curl]\n{% endcodeblock %}\n\n# 配置\nGit的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）\n{% codeblock %}\n# 显示当前的Git配置\n$ git config --list\n\n# 编辑Git配置文件\n$ git config -e [--global]\n\n# 设置提交代码时用户信息\ngit config [--global] user.name \"name\"\ngit config [--global] user.email \"eamil_adress\"\n{% endcodeblock %}\n\n# 增加/删除文件\n{% codeblock %}\n# 添加指定文件到暂存区\ngit add [file1] [file2] ...\n\n# 添加指定目录到暂存区，包括子目录\ngit add [dir]\n\n# 添加当前目录的所有文件到暂存区\n$ git add .\n\n# 添加每个变化前，都会要求确认\n# 对于同一个文件的多处变化，可以实现分次提交\n$ git add -p\n\n# 删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1] [file2] ...\n\n# 停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file]\n\n# 改名文件，并且将这个改名放入暂存区\n$ git mv [file-original] [file-renamed]\n{% endcodeblock %}\n\n# 代码提交\n{% codeblock %}\n# 提交暂存区到仓库区\n$ git commit -m [message]\n\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n# 提交时显示所有diff信息\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n{% endcodeblock %}\n\n# 分支\n{% codeblock %}\n# 列出所有本地分支\n$ git branch\n\n# 列出所有远程分支\n$ git branch -r\n\n# 列出所有本地分支和远程分支\n$ git branch -a\n\n# 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n\n# 新建一个分支，并切换到该分支\n$ git checkout -b [branch]\n\n# 新建一个分支，指向指定commit\n$ git branch [branch] [commit]\n\n# 新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch] [remote-branch]\n\n# 切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n\n# 切换到上一个分支\n$ git checkout -\n\n# 建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch] [remote-branch]\n\n# 合并指定分支到当前分支\n$ git merge [branch]\n\n# 选择一个commit，合并进当前分支\n$ git cherry-pick [commit]\n\n# 删除分支\n$ git branch -d [branch-name]\n\n# 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n{% endcodeblock %}\n\n# 标签\n{% codeblock %}\n# 列出所有tag\n$ git tag\n\n# 新建一个tag在当前commit\n$ git tag [tag]\n\n# 新建一个tag在指定commit\n$ git tag [tag] [commit]\n\n# 删除本地tag\n$ git tag -d [tag]\n\n# 删除远程tag\n$ git push origin :refs/tags/[tagName]\n\n# 查看tag信息\n$ git show [tag]\n\n# 提交指定tag\n$ git push [remote] [tag]\n\n# 提交所有tag\n$ git push [remote] --tags\n\n# 新建一个分支，指向某个tag\n$ git checkout -b [branch] [tag]\n{% endcodeblock %}\n\n# 查看信息\n{% codeblock %}\n# 显示有变更的文件\n$ git status\n\n# 显示当前分支的版本历史\n$ git log\n\n# 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n\n# 搜索提交历史，根据关键词\n$ git log -S [keyword]\n\n# 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] HEAD --pretty=format:%s\n\n# 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\n$ git log [tag] HEAD --grep feature\n\n# 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]\n\n# 显示指定文件相关的每一次diff\n$ git log -p [file]\n\n# 显示过去5次提交\n$ git log -5 --pretty --oneline\n\n# 显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn\n\n# 显示指定文件是什么人在什么时间修改过\n$ git blame [file]\n\n# 显示暂存区和工作区的差异\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\n\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\n# 显示今天你写了多少行代码\n$ git diff --shortstat \"@{0 day ago}\"\n\n# 显示某次提交的元数据和内容变化\n$ git show [commit]\n\n# 显示某次提交发生变化的文件\n$ git show --name-only [commit]\n\n# 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]\n\n# 显示当前分支的最近几次提交\n$ git reflog\n{% endcodeblock %}\n\n# 远程同步\n{% codeblock %}\n# 下载远程仓库的所有变动\n$ git fetch [remote]\n\n# 显示所有远程仓库\n$ git remote -v\n\n# 显示某个远程仓库的信息\n$ git remote show [remote]\n\n# 增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url]\n\n# 取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch]\n\n# 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n\n# 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force\n\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n{% endcodeblock %}\n\n# 撤销\n{% codeblock %}\n# 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n\n# 暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n{% endcodeblock %}\n\n\n\n参考链接：\n[常用Git命令清单](http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html)\n\n\n\n\n","slug":"BackUpHexoAndGit","published":1,"updated":"2018-03-28T13:15:22.647Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfb4bqdq000gjl0rmeaublx6","content":"<p>年后换了电脑，博客的文件也从旧电脑转到了新的电脑上面，但是总觉得这种方式很不方便，把文件拷来拷去。<br><br>由于博客是发布在GitHubPages上的，就想能不能把博客的生成文件也传到GitHub上。但是这样又出现一个新的问题，一个博客我要用两个仓库来存。突然想起来Git的branch，这岂不是正好用来存储源文件和生成的静态文件？<a id=\"more\"></a><br>首先在仓库新建一个Branch，我这里就直接命名为Hexo了，作为Hexo源文件的备份分支。然后把这个分支设置为默认分支，这样写完博客之后直接把源文件git push到GitHub的仓库中，再也不怕硬盘坏掉或者换电脑了。需要这些源文件的时候git clone下来，然后依次执行<br><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">install</span> -g hexo-cli</div><div class=\"line\">npm <span class=\"keyword\">install</span> hexo</div><div class=\"line\">npm <span class=\"keyword\">install</span></div></pre></td></tr></table></figure><br>这样环境就跟之前一模一样了。<br><img src=\"/images/BackUpHexoAndGit/hexo-backup.png\" alt=\"branch\"><br>最近也在学习使用Git了，这个工具真的很强大，后悔没有早点开始使用，在自己的服务器上也搭建了一个Git仓库，记录一些常用的命令：<br>一般来说日常使用只需要记住下图六个命令。<br><img src=\"/images/BackUpHexoAndGit/GitCommand.png\" alt=\"GitCommand\"><br>下面是常用的Git命令清单：</p>\n<h1 id=\"新建代码仓库\"><a href=\"#新建代码仓库\" class=\"headerlink\" title=\"新建代码仓库\"></a>新建代码仓库</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在当前目录新建一个Git代码库</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git init</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 新建一个目录，将其初始化为Git代码库</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git init [project-name]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载一个项目和它的整个代码历史</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">clone</span> [curl]</span></div></pre></td></tr></table></figure>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 显示当前的Git配置</span></div><div class=\"line\">$ git<span class=\"built_in\"> config </span>--list</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 编辑Git配置文件</span></div><div class=\"line\">$ git<span class=\"built_in\"> config </span>-e [--global]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 设置提交代码时用户信息</span></div><div class=\"line\">git<span class=\"built_in\"> config </span>[--global] user.name <span class=\"string\">\"name\"</span></div><div class=\"line\">git<span class=\"built_in\"> config </span>[--global] user.email <span class=\"string\">\"eamil_adress\"</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"增加-删除文件\"><a href=\"#增加-删除文件\" class=\"headerlink\" title=\"增加/删除文件\"></a>增加/删除文件</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 添加指定文件到暂存区</span></div><div class=\"line\">git add [file1] [file2] ...</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 添加指定目录到暂存区，包括子目录</span></div><div class=\"line\">git add [dir]</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 添加当前目录的所有文件到暂存区</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git add .</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 添加每个变化前，都会要求确认</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 对于同一个文件的多处变化，可以实现分次提交</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git add -p</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除工作区文件，并且将这次删除放入暂存区</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git rm [file1] [file2] ...</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 停止追踪指定文件，但该文件会保留在工作区</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git rm --cached [file]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 改名文件，并且将这个改名放入暂存区</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git mv [file-original] [file-renamed]</span></div></pre></td></tr></table></figure>\n<h1 id=\"代码提交\"><a href=\"#代码提交\" class=\"headerlink\" title=\"代码提交\"></a>代码提交</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 提交暂存区到仓库区</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit -m [message]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 提交暂存区的指定文件到仓库区</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit [file1] [file2] ... -m [message]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 提交工作区自上次commit之后的变化，直接到仓库区</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit -a</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 提交时显示所有diff信息</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit -v</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用一次新的commit，替代上一次提交</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit --amend -m [message]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重做上一次commit，并包括指定文件的新变化</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit --amend [file1] [file2] ...</span></div></pre></td></tr></table></figure>\n<h1 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 列出所有本地分支</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 列出所有远程分支</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch -r</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 列出所有本地分支和远程分支</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch -a</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 新建一个分支，但依然停留在当前分支</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch [branch-name]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 新建一个分支，并切换到该分支</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout -b [branch]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 新建一个分支，指向指定commit</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch [branch] [commit]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 新建一个分支，与指定的远程分支建立追踪关系</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch --track [branch] [remote-branch]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 切换到指定分支，并更新工作区</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout [branch-name]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 切换到上一个分支</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout -</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 建立追踪关系，在现有分支与指定的远程分支之间</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch --<span class=\"built_in\">set</span>-upstream [branch] [remote-branch]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 合并指定分支到当前分支</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git merge [branch]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 选择一个commit，合并进当前分支</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git cherry-pick [commit]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除分支</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch -d [branch-name]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除远程分支</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git push origin --delete [branch-name]</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch -dr [remote/branch]</span></div></pre></td></tr></table></figure>\n<h1 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 列出所有tag</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git tag</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 新建一个tag在当前commit</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git tag [tag]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 新建一个tag在指定commit</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git tag [tag] [commit]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除本地tag</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git tag -d [tag]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除远程tag</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git push origin :refs/tags/[tagName]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看tag信息</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git show [tag]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 提交指定tag</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git push [remote] [tag]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 提交所有tag</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git push [remote] --tags</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 新建一个分支，指向某个tag</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout -b [branch] [tag]</span></div></pre></td></tr></table></figure>\n<h1 id=\"查看信息\"><a href=\"#查看信息\" class=\"headerlink\" title=\"查看信息\"></a>查看信息</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示有变更的文件</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git status</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示当前分支的版本历史</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示commit历史，以及每次commit发生变更的文件</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> --<span class=\"built_in\">stat</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 搜索提交历史，根据关键词</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> -S [keyword]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示某个commit之后的所有变动，每个commit占据一行</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> [tag] HEAD --pretty=format:%s</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示某个commit之后的所有变动，其<span class=\"string\">\"提交说明\"</span>必须符合搜索条件</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> [tag] HEAD --grep feature</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示某个文件的版本历史，包括文件改名</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> --follow [file]</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git whatchanged [file]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示指定文件相关的每一次diff</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> -p [file]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示过去5次提交</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> -5 --pretty --oneline</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示所有提交过的用户，按提交次数排序</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git shortlog -sn</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示指定文件是什么人在什么时间修改过</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git blame [file]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示暂存区和工作区的差异</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git diff</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示暂存区和上一个commit的差异</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git diff --cached [file]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示工作区与当前分支最新commit之间的差异</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git diff HEAD</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示两次提交之间的差异</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git diff [first-branch]...[second-branch]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示今天你写了多少行代码</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git diff --shortstat <span class=\"string\">\"@&#123;0 day ago&#125;\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示某次提交的元数据和内容变化</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git show [commit]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示某次提交发生变化的文件</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git show --name-only [commit]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示某次提交时，某个文件的内容</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git show [commit]:[filename]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示当前分支的最近几次提交</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git reflog</span></div></pre></td></tr></table></figure>\n<h1 id=\"远程同步\"><a href=\"#远程同步\" class=\"headerlink\" title=\"远程同步\"></a>远程同步</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载远程仓库的所有变动</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git fetch [remote]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示所有远程仓库</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git remote -v</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示某个远程仓库的信息</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git remote show [remote]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 增加一个新的远程仓库，并命名</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git remote add [shortname] [url]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 取回远程仓库的变化，并与本地分支合并</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git pull [remote] [branch]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 上传本地指定分支到远程仓库</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git push [remote] [branch]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 强行推送当前分支到远程仓库，即使有冲突</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git push [remote] --force</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 推送所有分支到远程仓库</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git push [remote] --all</span></div></pre></td></tr></table></figure>\n<h1 id=\"撤销\"><a href=\"#撤销\" class=\"headerlink\" title=\"撤销\"></a>撤销</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 恢复暂存区的指定文件到工作区</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout [file]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 恢复某个commit的指定文件到暂存区和工作区</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout [commit] [file]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 恢复暂存区的所有文件到工作区</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout .</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git reset [file]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重置暂存区与工作区，与上一次commit保持一致</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git reset --hard</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git reset [commit]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git reset --hard [commit]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git reset --keep [commit]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 新建一个commit，用来撤销指定commit</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 后者的所有变化都将被前者抵消，并且应用到当前分支</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git revert [commit]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 暂时将未提交的变化移除，稍后再移入</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git stash</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git stash pop</span></div></pre></td></tr></table></figure>\n<p>参考链接：<br><a href=\"http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html\" target=\"_blank\" rel=\"external\">常用Git命令清单</a></p>\n","site":{"data":{}},"excerpt":"<p>年后换了电脑，博客的文件也从旧电脑转到了新的电脑上面，但是总觉得这种方式很不方便，把文件拷来拷去。<br><br>由于博客是发布在GitHubPages上的，就想能不能把博客的生成文件也传到GitHub上。但是这样又出现一个新的问题，一个博客我要用两个仓库来存。突然想起来Git的branch，这岂不是正好用来存储源文件和生成的静态文件？","more":"<br>首先在仓库新建一个Branch，我这里就直接命名为Hexo了，作为Hexo源文件的备份分支。然后把这个分支设置为默认分支，这样写完博客之后直接把源文件git push到GitHub的仓库中，再也不怕硬盘坏掉或者换电脑了。需要这些源文件的时候git clone下来，然后依次执行<br><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">install</span> -g hexo-cli</div><div class=\"line\">npm <span class=\"keyword\">install</span> hexo</div><div class=\"line\">npm <span class=\"keyword\">install</span></div></pre></td></tr></table></figure><br>这样环境就跟之前一模一样了。<br><img src=\"/images/BackUpHexoAndGit/hexo-backup.png\" alt=\"branch\"><br>最近也在学习使用Git了，这个工具真的很强大，后悔没有早点开始使用，在自己的服务器上也搭建了一个Git仓库，记录一些常用的命令：<br>一般来说日常使用只需要记住下图六个命令。<br><img src=\"/images/BackUpHexoAndGit/GitCommand.png\" alt=\"GitCommand\"><br>下面是常用的Git命令清单：</p>\n<h1 id=\"新建代码仓库\"><a href=\"#新建代码仓库\" class=\"headerlink\" title=\"新建代码仓库\"></a>新建代码仓库</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在当前目录新建一个Git代码库</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git init</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 新建一个目录，将其初始化为Git代码库</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git init [project-name]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载一个项目和它的整个代码历史</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">clone</span> [curl]</span></div></pre></td></tr></table></figure>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 显示当前的Git配置</span></div><div class=\"line\">$ git<span class=\"built_in\"> config </span>--list</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 编辑Git配置文件</span></div><div class=\"line\">$ git<span class=\"built_in\"> config </span>-e [--global]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 设置提交代码时用户信息</span></div><div class=\"line\">git<span class=\"built_in\"> config </span>[--global] user.name <span class=\"string\">\"name\"</span></div><div class=\"line\">git<span class=\"built_in\"> config </span>[--global] user.email <span class=\"string\">\"eamil_adress\"</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"增加-删除文件\"><a href=\"#增加-删除文件\" class=\"headerlink\" title=\"增加/删除文件\"></a>增加/删除文件</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 添加指定文件到暂存区</span></div><div class=\"line\">git add [file1] [file2] ...</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 添加指定目录到暂存区，包括子目录</span></div><div class=\"line\">git add [dir]</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 添加当前目录的所有文件到暂存区</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git add .</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 添加每个变化前，都会要求确认</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 对于同一个文件的多处变化，可以实现分次提交</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git add -p</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除工作区文件，并且将这次删除放入暂存区</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git rm [file1] [file2] ...</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 停止追踪指定文件，但该文件会保留在工作区</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git rm --cached [file]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 改名文件，并且将这个改名放入暂存区</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git mv [file-original] [file-renamed]</span></div></pre></td></tr></table></figure>\n<h1 id=\"代码提交\"><a href=\"#代码提交\" class=\"headerlink\" title=\"代码提交\"></a>代码提交</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 提交暂存区到仓库区</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit -m [message]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 提交暂存区的指定文件到仓库区</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit [file1] [file2] ... -m [message]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 提交工作区自上次commit之后的变化，直接到仓库区</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit -a</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 提交时显示所有diff信息</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit -v</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用一次新的commit，替代上一次提交</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit --amend -m [message]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重做上一次commit，并包括指定文件的新变化</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit --amend [file1] [file2] ...</span></div></pre></td></tr></table></figure>\n<h1 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 列出所有本地分支</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 列出所有远程分支</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch -r</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 列出所有本地分支和远程分支</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch -a</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 新建一个分支，但依然停留在当前分支</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch [branch-name]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 新建一个分支，并切换到该分支</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout -b [branch]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 新建一个分支，指向指定commit</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch [branch] [commit]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 新建一个分支，与指定的远程分支建立追踪关系</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch --track [branch] [remote-branch]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 切换到指定分支，并更新工作区</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout [branch-name]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 切换到上一个分支</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout -</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 建立追踪关系，在现有分支与指定的远程分支之间</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch --<span class=\"built_in\">set</span>-upstream [branch] [remote-branch]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 合并指定分支到当前分支</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git merge [branch]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 选择一个commit，合并进当前分支</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git cherry-pick [commit]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除分支</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch -d [branch-name]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除远程分支</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git push origin --delete [branch-name]</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch -dr [remote/branch]</span></div></pre></td></tr></table></figure>\n<h1 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 列出所有tag</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git tag</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 新建一个tag在当前commit</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git tag [tag]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 新建一个tag在指定commit</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git tag [tag] [commit]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除本地tag</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git tag -d [tag]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除远程tag</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git push origin :refs/tags/[tagName]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看tag信息</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git show [tag]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 提交指定tag</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git push [remote] [tag]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 提交所有tag</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git push [remote] --tags</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 新建一个分支，指向某个tag</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout -b [branch] [tag]</span></div></pre></td></tr></table></figure>\n<h1 id=\"查看信息\"><a href=\"#查看信息\" class=\"headerlink\" title=\"查看信息\"></a>查看信息</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示有变更的文件</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git status</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示当前分支的版本历史</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示commit历史，以及每次commit发生变更的文件</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> --<span class=\"built_in\">stat</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 搜索提交历史，根据关键词</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> -S [keyword]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示某个commit之后的所有变动，每个commit占据一行</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> [tag] HEAD --pretty=format:%s</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示某个commit之后的所有变动，其<span class=\"string\">\"提交说明\"</span>必须符合搜索条件</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> [tag] HEAD --grep feature</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示某个文件的版本历史，包括文件改名</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> --follow [file]</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git whatchanged [file]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示指定文件相关的每一次diff</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> -p [file]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示过去5次提交</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> -5 --pretty --oneline</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示所有提交过的用户，按提交次数排序</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git shortlog -sn</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示指定文件是什么人在什么时间修改过</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git blame [file]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示暂存区和工作区的差异</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git diff</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示暂存区和上一个commit的差异</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git diff --cached [file]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示工作区与当前分支最新commit之间的差异</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git diff HEAD</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示两次提交之间的差异</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git diff [first-branch]...[second-branch]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示今天你写了多少行代码</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git diff --shortstat <span class=\"string\">\"@&#123;0 day ago&#125;\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示某次提交的元数据和内容变化</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git show [commit]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示某次提交发生变化的文件</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git show --name-only [commit]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示某次提交时，某个文件的内容</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git show [commit]:[filename]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示当前分支的最近几次提交</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git reflog</span></div></pre></td></tr></table></figure>\n<h1 id=\"远程同步\"><a href=\"#远程同步\" class=\"headerlink\" title=\"远程同步\"></a>远程同步</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载远程仓库的所有变动</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git fetch [remote]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示所有远程仓库</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git remote -v</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示某个远程仓库的信息</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git remote show [remote]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 增加一个新的远程仓库，并命名</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git remote add [shortname] [url]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 取回远程仓库的变化，并与本地分支合并</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git pull [remote] [branch]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 上传本地指定分支到远程仓库</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git push [remote] [branch]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 强行推送当前分支到远程仓库，即使有冲突</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git push [remote] --force</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 推送所有分支到远程仓库</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git push [remote] --all</span></div></pre></td></tr></table></figure>\n<h1 id=\"撤销\"><a href=\"#撤销\" class=\"headerlink\" title=\"撤销\"></a>撤销</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 恢复暂存区的指定文件到工作区</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout [file]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 恢复某个commit的指定文件到暂存区和工作区</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout [commit] [file]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 恢复暂存区的所有文件到工作区</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout .</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git reset [file]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重置暂存区与工作区，与上一次commit保持一致</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git reset --hard</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git reset [commit]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git reset --hard [commit]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git reset --keep [commit]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 新建一个commit，用来撤销指定commit</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 后者的所有变化都将被前者抵消，并且应用到当前分支</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git revert [commit]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 暂时将未提交的变化移除，稍后再移入</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git stash</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git stash pop</span></div></pre></td></tr></table></figure>\n<p>参考链接：<br><a href=\"http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html\" target=\"_blank\" rel=\"external\">常用Git命令清单</a></p>"},{"title":"GitHub Pages+Hexo建立博客","date":"2017-10-27T11:32:04.000Z","_content":"\n之前有用过WordPress直接建站，但是WordPress有两个不好的地方：\n1、WordPress是动态的，对于服务器的要求比较高，配置比较低的服务器运行时候会加载很慢。\n2、国内想用自己的域名建网站必须要备案，比较麻烦。\n\n恰好听到同学说可以用Hexo和Github Pages来做静态的个人博客。相比WordPress，Hexo+Github Pages可以不用购买服务器，省了一笔钱。其次Hexo是静态的，加载速度很快，很适合个人博客的搭建。\n<!--more-->\n# 安装环境\n要想使用Hexo，首先要在你的电脑上面安装Node.js和Git工具\n安装完毕之后，在你想放置网站文件的地方建立一个文件夹。比如 D:/Hexo。进入到文件夹之后使用git工具\n```\n$ npm install hexo-cli -g\n$ hexo init blog\n$ cd blog\n$ npm install\n$ hexo g # 或者hexo generate\n$ hexo s # 或者hexo server，可以在http://localhost:4000/ 查看\n```\n这里提一下Hexo常用的几个命令：\n```\nhexo generate(hexo g)       生成静态文件，会在当前目录下生成一个新的public文件夹\nhexo server(hexo s)         启动本地Web服务，用于博客的预览\nhexo deploy(hexo d)         部署博客到远端，比如GitHub\nhexo new \"postName\"         新建文章，路径在/source/_posts\nhexo new pages \"pageName\"   新建页面，路径在/source\n```\n安装完成之后，就要选择你需要使用的主题了。Hexo有很多主题可以选择，我这里使用的是Next主题。在GitHub上面搜索到项目之后会有很详细的使用说明，这里不再赘述。<br>\n关于主题的个性化定制，一般主题会有很多地方可以个性化更改，可以根据官方文档自行更改，或者使用搜索引擎来获取个性化定制的细节，每个主题都不相同。<br>\n需要注意的是，更新主题的时候如果是修改了css文件，需要先清除之前生成的缓存文件，不然有可能无法正常生效。\n```\n$ hexo clean\n$ hexo generate\n```\n# GitHub Pages设置\n## 什么是GitHub Pages\n[GitHub Pages](https://pages.github.com/)本来是用来介绍托管在Github上面的项目，不过由于空间免费稳定，被很多人拿来搭建个人博客。<br>\n每个人只能有一个仓库来存放个人主页，而且仓库的名字必须是username/username.github.io，这是特殊的命名约定。可以通过 http://username.github.io 来直接访问你的个人主页。<br>\n这里需要特别注意一下，个人网页的网站内容是在master分支下面的。\n## 配置和使用GitHub Pages\n我们如何让本地的项目与远程的Github建立联系呢？一般来说有两种方法。一种是通过GitHub的账号密码来进行操作，第二种是比较推荐，通过SSH keys来建立连接。\n### 检查SSH keys的设置\n首先需要检查电脑上现有的SSH key：\n`cd ~/.ssh   检查本机的ssh密钥`\n如果提示：No such file or directory 说明你第一次使用git，按照下面的步骤创建新的SSH key\n```\n$ ssh-keygen -t rsa -C \"邮件地址\"\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):<回车就好>\n```\n然后系统会提示你输入密码：\n```\nEnter passphrase (empty for no passphrase):<输入加密串>\nEnter same passphrase again:<再次输入>\n```\n### 添加SSH key到Github\n1 在本机设置SSH key之后，需要添加到Github上，已完成SSH链接的设置。<br>\n首先打开本地id_rsa.pub文件，(参考地址： C:\\Users\\yourname\\.ssh\\id_rsa.pub)。文件内容为刚才生成的密钥，复制文件内容。\n2 登陆Github，点击右上角Settings->SSH and GPG keys 。新建SSH keys，内容为刚才复制的密钥内容。\n3 测试下面的命令，看是否成功，命令不要更改\n`$ ssh -T git@GitHub.com`\n如果看到如下反馈\n```\nThe authenticity of host 'GitHub.com (207.97.227.239)' can't be established.\nRSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\nAre you sure you want to continue connecting (yes/no)?\n```\n不要紧张，输入 yes 就好，然后会看到成功的信息。\n有的时候会提示permission denied，此时一般是ssh公钥没有添加到本地SSH环境中，只需要使用ssh-add命令添加公钥即可。\n```\nssh-add your_publickey\n```\n## 设置用户信息\n现在你已经可以通过 SSH 链接到 GitHub 了，还有一些个人信息需要完善的。\nGit 会根据用户的名字和邮箱来记录提交。GitHub 也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字必须是你的真名，而不是GitHub的昵称。\n```\n$ git config --global user.name \"username\"//用户名\n$ git config --global user.email  \"username@gmail.com\"//填写自己的邮箱\n```\n# 域名\n上面已经完成了基本环境的设置，但是搭建个人博客，最重要的是要有一个自己的域名。这里域名推荐去Godaddy上面购买，选好自己喜欢的域名之后，建立解析即可。注意，域名解析要建立两个A的解析记录，分别为192.30.252.154和192.30.252.153。然后建立一个CNAME类型的解析，主机记录设置为www，记录值设置为你的Github Pages的网址，比如yourname.github.io。<br>\n做完上面的步骤，其实还是不能直接通过自己的域名去访问Github Pages的。还需要两个小步骤的设置：\n先进入Github，进入Github Pages的仓库，然后找到Settings->Options->GitHub Pages 找到Custom domain，把你设置的个人域名添加进去。<br>\n然后在仓库的根目录添加一个CNAME文件，文件内容为你的域名<br>\n完成上面的设置，已经可以成功通过自己的域名访问\n\n# 把博客部署到Github\n前面我们已经完成了所有的基础设置，并且已经可以在本地访问自己的博客，下面我们需要完成的就是把本地的博客部署到Github上面。Hexo提供了deploy插件让我们使用，方便部署到很多平台。如果部署到Github，需要先安装扩展\n`$ npm install hexo-deployer-git --save`\n然后在配置文件_config.xml中做下面的修改：\n```\ndeploy:\n    type: git\n    repo: git@github.com:yourname/yourname.github.io.git //可以在项目仓库clone看到地址\n    branch: master\n```\n然后再执行\n`hexo d`\n就能完成部署，这时通过你的域名就能直接访问博客了。\n\n\n# 参考链接\n[手把手教你使用Hexo + Github Pages搭建个人独立博客](https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/)\n[MarkDown语法说明(简体中文版)](http://wowubuntu.com/markdown/index.html)\n[hexo的next主题个性化配置教程](http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html)\n\n","source":"_posts/2017-10-27-CreateWebsite.md","raw":"---\ntitle: GitHub Pages+Hexo建立博客\ndate: 2017-10-27 19:32:04\ntags: \n- Hexo\n- Github Pages\ncategories:\n- 技术\n---\n\n之前有用过WordPress直接建站，但是WordPress有两个不好的地方：\n1、WordPress是动态的，对于服务器的要求比较高，配置比较低的服务器运行时候会加载很慢。\n2、国内想用自己的域名建网站必须要备案，比较麻烦。\n\n恰好听到同学说可以用Hexo和Github Pages来做静态的个人博客。相比WordPress，Hexo+Github Pages可以不用购买服务器，省了一笔钱。其次Hexo是静态的，加载速度很快，很适合个人博客的搭建。\n<!--more-->\n# 安装环境\n要想使用Hexo，首先要在你的电脑上面安装Node.js和Git工具\n安装完毕之后，在你想放置网站文件的地方建立一个文件夹。比如 D:/Hexo。进入到文件夹之后使用git工具\n```\n$ npm install hexo-cli -g\n$ hexo init blog\n$ cd blog\n$ npm install\n$ hexo g # 或者hexo generate\n$ hexo s # 或者hexo server，可以在http://localhost:4000/ 查看\n```\n这里提一下Hexo常用的几个命令：\n```\nhexo generate(hexo g)       生成静态文件，会在当前目录下生成一个新的public文件夹\nhexo server(hexo s)         启动本地Web服务，用于博客的预览\nhexo deploy(hexo d)         部署博客到远端，比如GitHub\nhexo new \"postName\"         新建文章，路径在/source/_posts\nhexo new pages \"pageName\"   新建页面，路径在/source\n```\n安装完成之后，就要选择你需要使用的主题了。Hexo有很多主题可以选择，我这里使用的是Next主题。在GitHub上面搜索到项目之后会有很详细的使用说明，这里不再赘述。<br>\n关于主题的个性化定制，一般主题会有很多地方可以个性化更改，可以根据官方文档自行更改，或者使用搜索引擎来获取个性化定制的细节，每个主题都不相同。<br>\n需要注意的是，更新主题的时候如果是修改了css文件，需要先清除之前生成的缓存文件，不然有可能无法正常生效。\n```\n$ hexo clean\n$ hexo generate\n```\n# GitHub Pages设置\n## 什么是GitHub Pages\n[GitHub Pages](https://pages.github.com/)本来是用来介绍托管在Github上面的项目，不过由于空间免费稳定，被很多人拿来搭建个人博客。<br>\n每个人只能有一个仓库来存放个人主页，而且仓库的名字必须是username/username.github.io，这是特殊的命名约定。可以通过 http://username.github.io 来直接访问你的个人主页。<br>\n这里需要特别注意一下，个人网页的网站内容是在master分支下面的。\n## 配置和使用GitHub Pages\n我们如何让本地的项目与远程的Github建立联系呢？一般来说有两种方法。一种是通过GitHub的账号密码来进行操作，第二种是比较推荐，通过SSH keys来建立连接。\n### 检查SSH keys的设置\n首先需要检查电脑上现有的SSH key：\n`cd ~/.ssh   检查本机的ssh密钥`\n如果提示：No such file or directory 说明你第一次使用git，按照下面的步骤创建新的SSH key\n```\n$ ssh-keygen -t rsa -C \"邮件地址\"\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):<回车就好>\n```\n然后系统会提示你输入密码：\n```\nEnter passphrase (empty for no passphrase):<输入加密串>\nEnter same passphrase again:<再次输入>\n```\n### 添加SSH key到Github\n1 在本机设置SSH key之后，需要添加到Github上，已完成SSH链接的设置。<br>\n首先打开本地id_rsa.pub文件，(参考地址： C:\\Users\\yourname\\.ssh\\id_rsa.pub)。文件内容为刚才生成的密钥，复制文件内容。\n2 登陆Github，点击右上角Settings->SSH and GPG keys 。新建SSH keys，内容为刚才复制的密钥内容。\n3 测试下面的命令，看是否成功，命令不要更改\n`$ ssh -T git@GitHub.com`\n如果看到如下反馈\n```\nThe authenticity of host 'GitHub.com (207.97.227.239)' can't be established.\nRSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\nAre you sure you want to continue connecting (yes/no)?\n```\n不要紧张，输入 yes 就好，然后会看到成功的信息。\n有的时候会提示permission denied，此时一般是ssh公钥没有添加到本地SSH环境中，只需要使用ssh-add命令添加公钥即可。\n```\nssh-add your_publickey\n```\n## 设置用户信息\n现在你已经可以通过 SSH 链接到 GitHub 了，还有一些个人信息需要完善的。\nGit 会根据用户的名字和邮箱来记录提交。GitHub 也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字必须是你的真名，而不是GitHub的昵称。\n```\n$ git config --global user.name \"username\"//用户名\n$ git config --global user.email  \"username@gmail.com\"//填写自己的邮箱\n```\n# 域名\n上面已经完成了基本环境的设置，但是搭建个人博客，最重要的是要有一个自己的域名。这里域名推荐去Godaddy上面购买，选好自己喜欢的域名之后，建立解析即可。注意，域名解析要建立两个A的解析记录，分别为192.30.252.154和192.30.252.153。然后建立一个CNAME类型的解析，主机记录设置为www，记录值设置为你的Github Pages的网址，比如yourname.github.io。<br>\n做完上面的步骤，其实还是不能直接通过自己的域名去访问Github Pages的。还需要两个小步骤的设置：\n先进入Github，进入Github Pages的仓库，然后找到Settings->Options->GitHub Pages 找到Custom domain，把你设置的个人域名添加进去。<br>\n然后在仓库的根目录添加一个CNAME文件，文件内容为你的域名<br>\n完成上面的设置，已经可以成功通过自己的域名访问\n\n# 把博客部署到Github\n前面我们已经完成了所有的基础设置，并且已经可以在本地访问自己的博客，下面我们需要完成的就是把本地的博客部署到Github上面。Hexo提供了deploy插件让我们使用，方便部署到很多平台。如果部署到Github，需要先安装扩展\n`$ npm install hexo-deployer-git --save`\n然后在配置文件_config.xml中做下面的修改：\n```\ndeploy:\n    type: git\n    repo: git@github.com:yourname/yourname.github.io.git //可以在项目仓库clone看到地址\n    branch: master\n```\n然后再执行\n`hexo d`\n就能完成部署，这时通过你的域名就能直接访问博客了。\n\n\n# 参考链接\n[手把手教你使用Hexo + Github Pages搭建个人独立博客](https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/)\n[MarkDown语法说明(简体中文版)](http://wowubuntu.com/markdown/index.html)\n[hexo的next主题个性化配置教程](http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html)\n\n","slug":"CreateWebsite","published":1,"updated":"2018-03-28T13:13:30.518Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfb4bqds000hjl0r5e7dpwjd","content":"<p>之前有用过WordPress直接建站，但是WordPress有两个不好的地方：<br>1、WordPress是动态的，对于服务器的要求比较高，配置比较低的服务器运行时候会加载很慢。<br>2、国内想用自己的域名建网站必须要备案，比较麻烦。</p>\n<p>恰好听到同学说可以用Hexo和Github Pages来做静态的个人博客。相比WordPress，Hexo+Github Pages可以不用购买服务器，省了一笔钱。其次Hexo是静态的，加载速度很快，很适合个人博客的搭建。<br><a id=\"more\"></a></p>\n<h1 id=\"安装环境\"><a href=\"#安装环境\" class=\"headerlink\" title=\"安装环境\"></a>安装环境</h1><p>要想使用Hexo，首先要在你的电脑上面安装Node.js和Git工具<br>安装完毕之后，在你想放置网站文件的地方建立一个文件夹。比如 D:/Hexo。进入到文件夹之后使用git工具<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install hexo-cli -g</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo init blog</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> blog</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo g <span class=\"comment\"># 或者hexo generate</span></span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo s <span class=\"comment\"># 或者hexo server，可以在http://localhost:4000/ 查看</span></span></div></pre></td></tr></table></figure></p>\n<p>这里提一下Hexo常用的几个命令：<br><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo <span class=\"keyword\">generate</span>(hexo g)       生成静态文件，会在当前目录下生成一个新的public文件夹</div><div class=\"line\">hexo server(hexo s)         启动本地Web服务，用于博客的预览</div><div class=\"line\">hexo deploy(hexo d)         部署博客到远端，比如GitHub</div><div class=\"line\">hexo <span class=\"keyword\">new</span> <span class=\"string\">\"postName\"</span>         新建文章，路径在/source/<span class=\"number\">_</span>posts</div><div class=\"line\">hexo <span class=\"keyword\">new</span> pages <span class=\"string\">\"pageName\"</span>   新建页面，路径在/source</div></pre></td></tr></table></figure></p>\n<p>安装完成之后，就要选择你需要使用的主题了。Hexo有很多主题可以选择，我这里使用的是Next主题。在GitHub上面搜索到项目之后会有很详细的使用说明，这里不再赘述。<br><br>关于主题的个性化定制，一般主题会有很多地方可以个性化更改，可以根据官方文档自行更改，或者使用搜索引擎来获取个性化定制的细节，每个主题都不相同。<br><br>需要注意的是，更新主题的时候如果是修改了css文件，需要先清除之前生成的缓存文件，不然有可能无法正常生效。<br><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo clean</div><div class=\"line\">$ hexo <span class=\"keyword\">generate</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"GitHub-Pages设置\"><a href=\"#GitHub-Pages设置\" class=\"headerlink\" title=\"GitHub Pages设置\"></a>GitHub Pages设置</h1><h2 id=\"什么是GitHub-Pages\"><a href=\"#什么是GitHub-Pages\" class=\"headerlink\" title=\"什么是GitHub Pages\"></a>什么是GitHub Pages</h2><p><a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"external\">GitHub Pages</a>本来是用来介绍托管在Github上面的项目，不过由于空间免费稳定，被很多人拿来搭建个人博客。<br><br>每个人只能有一个仓库来存放个人主页，而且仓库的名字必须是username/username.github.io，这是特殊的命名约定。可以通过 <a href=\"http://username.github.io\" target=\"_blank\" rel=\"external\">http://username.github.io</a> 来直接访问你的个人主页。<br><br>这里需要特别注意一下，个人网页的网站内容是在master分支下面的。</p>\n<h2 id=\"配置和使用GitHub-Pages\"><a href=\"#配置和使用GitHub-Pages\" class=\"headerlink\" title=\"配置和使用GitHub Pages\"></a>配置和使用GitHub Pages</h2><p>我们如何让本地的项目与远程的Github建立联系呢？一般来说有两种方法。一种是通过GitHub的账号密码来进行操作，第二种是比较推荐，通过SSH keys来建立连接。</p>\n<h3 id=\"检查SSH-keys的设置\"><a href=\"#检查SSH-keys的设置\" class=\"headerlink\" title=\"检查SSH keys的设置\"></a>检查SSH keys的设置</h3><p>首先需要检查电脑上现有的SSH key：<br><code>cd ~/.ssh   检查本机的ssh密钥</code><br>如果提示：No such file or directory 说明你第一次使用git，按照下面的步骤创建新的SSH key<br><figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"邮件地址\"</span></div><div class=\"line\">Generating <span class=\"keyword\">public</span>/<span class=\"keyword\">private</span> rsa <span class=\"keyword\">key</span> pair.</div><div class=\"line\">Enter file <span class=\"keyword\">in</span> which <span class=\"keyword\">to</span> save the <span class=\"keyword\">key</span> (/Users/your_user_directory/.ssh/id_rsa):&lt;回车就好&gt;</div></pre></td></tr></table></figure></p>\n<p>然后系统会提示你输入密码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Enter passphrase (empty <span class=\"keyword\">for</span> no passphrase):<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">输入加密串</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">Enter same passphrase again:<span class=\"tag\">&lt;<span class=\"name\">再次输入</span>&gt;</span></span></div></pre></td></tr></table></figure></p>\n<h3 id=\"添加SSH-key到Github\"><a href=\"#添加SSH-key到Github\" class=\"headerlink\" title=\"添加SSH key到Github\"></a>添加SSH key到Github</h3><p>1 在本机设置SSH key之后，需要添加到Github上，已完成SSH链接的设置。<br><br>首先打开本地id_rsa.pub文件，(参考地址： C:\\Users\\yourname.ssh\\id_rsa.pub)。文件内容为刚才生成的密钥，复制文件内容。<br>2 登陆Github，点击右上角Settings-&gt;SSH and GPG keys 。新建SSH keys，内容为刚才复制的密钥内容。<br>3 测试下面的命令，看是否成功，命令不要更改<br><code>$ ssh -T git@GitHub.com</code><br>如果看到如下反馈<br><figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">The authenticity <span class=\"keyword\">of</span> host <span class=\"comment\">'GitHub.com (207.97.227.239)' can't be established.</span></div><div class=\"line\">RSA <span class=\"keyword\">key</span> fingerprint <span class=\"keyword\">is</span> <span class=\"number\">16</span>:<span class=\"number\">27</span>:ac:a5:<span class=\"number\">76</span>:<span class=\"number\">28</span>:<span class=\"number\">2</span>d:<span class=\"number\">36</span>:<span class=\"number\">63</span>:<span class=\"number\">1</span>b:<span class=\"number\">56</span>:<span class=\"number\">4</span>d:eb:df:a6:<span class=\"number\">48.</span></div><div class=\"line\">Are you sure you want <span class=\"keyword\">to</span> <span class=\"keyword\">continue</span> connecting (yes/no)?</div></pre></td></tr></table></figure></p>\n<p>不要紧张，输入 yes 就好，然后会看到成功的信息。<br>有的时候会提示permission denied，此时一般是ssh公钥没有添加到本地SSH环境中，只需要使用ssh-add命令添加公钥即可。<br><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-<span class=\"keyword\">add</span><span class=\"bash\"> your_publickey</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"设置用户信息\"><a href=\"#设置用户信息\" class=\"headerlink\" title=\"设置用户信息\"></a>设置用户信息</h2><p>现在你已经可以通过 SSH 链接到 GitHub 了，还有一些个人信息需要完善的。<br>Git 会根据用户的名字和邮箱来记录提交。GitHub 也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字必须是你的真名，而不是GitHub的昵称。<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user<span class=\"selector-class\">.name</span> <span class=\"string\">\"username\"</span><span class=\"comment\">//用户名</span></div><div class=\"line\">$ git config --global user<span class=\"selector-class\">.email</span>  <span class=\"string\">\"username@gmail.com\"</span><span class=\"comment\">//填写自己的邮箱</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"域名\"><a href=\"#域名\" class=\"headerlink\" title=\"域名\"></a>域名</h1><p>上面已经完成了基本环境的设置，但是搭建个人博客，最重要的是要有一个自己的域名。这里域名推荐去Godaddy上面购买，选好自己喜欢的域名之后，建立解析即可。注意，域名解析要建立两个A的解析记录，分别为192.30.252.154和192.30.252.153。然后建立一个CNAME类型的解析，主机记录设置为www，记录值设置为你的Github Pages的网址，比如yourname.github.io。<br><br>做完上面的步骤，其实还是不能直接通过自己的域名去访问Github Pages的。还需要两个小步骤的设置：<br>先进入Github，进入Github Pages的仓库，然后找到Settings-&gt;Options-&gt;GitHub Pages 找到Custom domain，把你设置的个人域名添加进去。<br><br>然后在仓库的根目录添加一个CNAME文件，文件内容为你的域名<br><br>完成上面的设置，已经可以成功通过自己的域名访问</p>\n<h1 id=\"把博客部署到Github\"><a href=\"#把博客部署到Github\" class=\"headerlink\" title=\"把博客部署到Github\"></a>把博客部署到Github</h1><p>前面我们已经完成了所有的基础设置，并且已经可以在本地访问自己的博客，下面我们需要完成的就是把本地的博客部署到Github上面。Hexo提供了deploy插件让我们使用，方便部署到很多平台。如果部署到Github，需要先安装扩展<br><code>$ npm install hexo-deployer-git --save</code><br>然后在配置文件_config.xml中做下面的修改：<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">deploy</span>:</div><div class=\"line\">    <span class=\"attribute\">type</span>: git</div><div class=\"line\">    <span class=\"attribute\">repo</span>: git<span class=\"variable\">@github</span>.<span class=\"attribute\">com</span>:yourname/yourname.github.io.git <span class=\"comment\">//可以在项目仓库clone看到地址</span></div><div class=\"line\">    <span class=\"attribute\">branch</span>: master</div></pre></td></tr></table></figure></p>\n<p>然后再执行<br><code>hexo d</code><br>就能完成部署，这时通过你的域名就能直接访问博客了。</p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/\" target=\"_blank\" rel=\"external\">手把手教你使用Hexo + Github Pages搭建个人独立博客</a><br><a href=\"http://wowubuntu.com/markdown/index.html\" target=\"_blank\" rel=\"external\">MarkDown语法说明(简体中文版)</a><br><a href=\"http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html\" target=\"_blank\" rel=\"external\">hexo的next主题个性化配置教程</a></p>\n","site":{"data":{}},"excerpt":"<p>之前有用过WordPress直接建站，但是WordPress有两个不好的地方：<br>1、WordPress是动态的，对于服务器的要求比较高，配置比较低的服务器运行时候会加载很慢。<br>2、国内想用自己的域名建网站必须要备案，比较麻烦。</p>\n<p>恰好听到同学说可以用Hexo和Github Pages来做静态的个人博客。相比WordPress，Hexo+Github Pages可以不用购买服务器，省了一笔钱。其次Hexo是静态的，加载速度很快，很适合个人博客的搭建。<br>","more":"</p>\n<h1 id=\"安装环境\"><a href=\"#安装环境\" class=\"headerlink\" title=\"安装环境\"></a>安装环境</h1><p>要想使用Hexo，首先要在你的电脑上面安装Node.js和Git工具<br>安装完毕之后，在你想放置网站文件的地方建立一个文件夹。比如 D:/Hexo。进入到文件夹之后使用git工具<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install hexo-cli -g</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo init blog</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> blog</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo g <span class=\"comment\"># 或者hexo generate</span></span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo s <span class=\"comment\"># 或者hexo server，可以在http://localhost:4000/ 查看</span></span></div></pre></td></tr></table></figure></p>\n<p>这里提一下Hexo常用的几个命令：<br><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo <span class=\"keyword\">generate</span>(hexo g)       生成静态文件，会在当前目录下生成一个新的public文件夹</div><div class=\"line\">hexo server(hexo s)         启动本地Web服务，用于博客的预览</div><div class=\"line\">hexo deploy(hexo d)         部署博客到远端，比如GitHub</div><div class=\"line\">hexo <span class=\"keyword\">new</span> <span class=\"string\">\"postName\"</span>         新建文章，路径在/source/<span class=\"number\">_</span>posts</div><div class=\"line\">hexo <span class=\"keyword\">new</span> pages <span class=\"string\">\"pageName\"</span>   新建页面，路径在/source</div></pre></td></tr></table></figure></p>\n<p>安装完成之后，就要选择你需要使用的主题了。Hexo有很多主题可以选择，我这里使用的是Next主题。在GitHub上面搜索到项目之后会有很详细的使用说明，这里不再赘述。<br><br>关于主题的个性化定制，一般主题会有很多地方可以个性化更改，可以根据官方文档自行更改，或者使用搜索引擎来获取个性化定制的细节，每个主题都不相同。<br><br>需要注意的是，更新主题的时候如果是修改了css文件，需要先清除之前生成的缓存文件，不然有可能无法正常生效。<br><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo clean</div><div class=\"line\">$ hexo <span class=\"keyword\">generate</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"GitHub-Pages设置\"><a href=\"#GitHub-Pages设置\" class=\"headerlink\" title=\"GitHub Pages设置\"></a>GitHub Pages设置</h1><h2 id=\"什么是GitHub-Pages\"><a href=\"#什么是GitHub-Pages\" class=\"headerlink\" title=\"什么是GitHub Pages\"></a>什么是GitHub Pages</h2><p><a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"external\">GitHub Pages</a>本来是用来介绍托管在Github上面的项目，不过由于空间免费稳定，被很多人拿来搭建个人博客。<br><br>每个人只能有一个仓库来存放个人主页，而且仓库的名字必须是username/username.github.io，这是特殊的命名约定。可以通过 <a href=\"http://username.github.io\" target=\"_blank\" rel=\"external\">http://username.github.io</a> 来直接访问你的个人主页。<br><br>这里需要特别注意一下，个人网页的网站内容是在master分支下面的。</p>\n<h2 id=\"配置和使用GitHub-Pages\"><a href=\"#配置和使用GitHub-Pages\" class=\"headerlink\" title=\"配置和使用GitHub Pages\"></a>配置和使用GitHub Pages</h2><p>我们如何让本地的项目与远程的Github建立联系呢？一般来说有两种方法。一种是通过GitHub的账号密码来进行操作，第二种是比较推荐，通过SSH keys来建立连接。</p>\n<h3 id=\"检查SSH-keys的设置\"><a href=\"#检查SSH-keys的设置\" class=\"headerlink\" title=\"检查SSH keys的设置\"></a>检查SSH keys的设置</h3><p>首先需要检查电脑上现有的SSH key：<br><code>cd ~/.ssh   检查本机的ssh密钥</code><br>如果提示：No such file or directory 说明你第一次使用git，按照下面的步骤创建新的SSH key<br><figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"邮件地址\"</span></div><div class=\"line\">Generating <span class=\"keyword\">public</span>/<span class=\"keyword\">private</span> rsa <span class=\"keyword\">key</span> pair.</div><div class=\"line\">Enter file <span class=\"keyword\">in</span> which <span class=\"keyword\">to</span> save the <span class=\"keyword\">key</span> (/Users/your_user_directory/.ssh/id_rsa):&lt;回车就好&gt;</div></pre></td></tr></table></figure></p>\n<p>然后系统会提示你输入密码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Enter passphrase (empty <span class=\"keyword\">for</span> no passphrase):<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">输入加密串</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">Enter same passphrase again:<span class=\"tag\">&lt;<span class=\"name\">再次输入</span>&gt;</span></span></div></pre></td></tr></table></figure></p>\n<h3 id=\"添加SSH-key到Github\"><a href=\"#添加SSH-key到Github\" class=\"headerlink\" title=\"添加SSH key到Github\"></a>添加SSH key到Github</h3><p>1 在本机设置SSH key之后，需要添加到Github上，已完成SSH链接的设置。<br><br>首先打开本地id_rsa.pub文件，(参考地址： C:\\Users\\yourname.ssh\\id_rsa.pub)。文件内容为刚才生成的密钥，复制文件内容。<br>2 登陆Github，点击右上角Settings-&gt;SSH and GPG keys 。新建SSH keys，内容为刚才复制的密钥内容。<br>3 测试下面的命令，看是否成功，命令不要更改<br><code>$ ssh -T git@GitHub.com</code><br>如果看到如下反馈<br><figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">The authenticity <span class=\"keyword\">of</span> host <span class=\"comment\">'GitHub.com (207.97.227.239)' can't be established.</span></div><div class=\"line\">RSA <span class=\"keyword\">key</span> fingerprint <span class=\"keyword\">is</span> <span class=\"number\">16</span>:<span class=\"number\">27</span>:ac:a5:<span class=\"number\">76</span>:<span class=\"number\">28</span>:<span class=\"number\">2</span>d:<span class=\"number\">36</span>:<span class=\"number\">63</span>:<span class=\"number\">1</span>b:<span class=\"number\">56</span>:<span class=\"number\">4</span>d:eb:df:a6:<span class=\"number\">48.</span></div><div class=\"line\">Are you sure you want <span class=\"keyword\">to</span> <span class=\"keyword\">continue</span> connecting (yes/no)?</div></pre></td></tr></table></figure></p>\n<p>不要紧张，输入 yes 就好，然后会看到成功的信息。<br>有的时候会提示permission denied，此时一般是ssh公钥没有添加到本地SSH环境中，只需要使用ssh-add命令添加公钥即可。<br><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-<span class=\"keyword\">add</span><span class=\"bash\"> your_publickey</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"设置用户信息\"><a href=\"#设置用户信息\" class=\"headerlink\" title=\"设置用户信息\"></a>设置用户信息</h2><p>现在你已经可以通过 SSH 链接到 GitHub 了，还有一些个人信息需要完善的。<br>Git 会根据用户的名字和邮箱来记录提交。GitHub 也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字必须是你的真名，而不是GitHub的昵称。<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user<span class=\"selector-class\">.name</span> <span class=\"string\">\"username\"</span><span class=\"comment\">//用户名</span></div><div class=\"line\">$ git config --global user<span class=\"selector-class\">.email</span>  <span class=\"string\">\"username@gmail.com\"</span><span class=\"comment\">//填写自己的邮箱</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"域名\"><a href=\"#域名\" class=\"headerlink\" title=\"域名\"></a>域名</h1><p>上面已经完成了基本环境的设置，但是搭建个人博客，最重要的是要有一个自己的域名。这里域名推荐去Godaddy上面购买，选好自己喜欢的域名之后，建立解析即可。注意，域名解析要建立两个A的解析记录，分别为192.30.252.154和192.30.252.153。然后建立一个CNAME类型的解析，主机记录设置为www，记录值设置为你的Github Pages的网址，比如yourname.github.io。<br><br>做完上面的步骤，其实还是不能直接通过自己的域名去访问Github Pages的。还需要两个小步骤的设置：<br>先进入Github，进入Github Pages的仓库，然后找到Settings-&gt;Options-&gt;GitHub Pages 找到Custom domain，把你设置的个人域名添加进去。<br><br>然后在仓库的根目录添加一个CNAME文件，文件内容为你的域名<br><br>完成上面的设置，已经可以成功通过自己的域名访问</p>\n<h1 id=\"把博客部署到Github\"><a href=\"#把博客部署到Github\" class=\"headerlink\" title=\"把博客部署到Github\"></a>把博客部署到Github</h1><p>前面我们已经完成了所有的基础设置，并且已经可以在本地访问自己的博客，下面我们需要完成的就是把本地的博客部署到Github上面。Hexo提供了deploy插件让我们使用，方便部署到很多平台。如果部署到Github，需要先安装扩展<br><code>$ npm install hexo-deployer-git --save</code><br>然后在配置文件_config.xml中做下面的修改：<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">deploy</span>:</div><div class=\"line\">    <span class=\"attribute\">type</span>: git</div><div class=\"line\">    <span class=\"attribute\">repo</span>: git<span class=\"variable\">@github</span>.<span class=\"attribute\">com</span>:yourname/yourname.github.io.git <span class=\"comment\">//可以在项目仓库clone看到地址</span></div><div class=\"line\">    <span class=\"attribute\">branch</span>: master</div></pre></td></tr></table></figure></p>\n<p>然后再执行<br><code>hexo d</code><br>就能完成部署，这时通过你的域名就能直接访问博客了。</p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/\" target=\"_blank\" rel=\"external\">手把手教你使用Hexo + Github Pages搭建个人独立博客</a><br><a href=\"http://wowubuntu.com/markdown/index.html\" target=\"_blank\" rel=\"external\">MarkDown语法说明(简体中文版)</a><br><a href=\"http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html\" target=\"_blank\" rel=\"external\">hexo的next主题个性化配置教程</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjfb4bqdh0002jl0rnfo5z06p","category_id":"cjfb4bqdm0006jl0ripa4m52r","_id":"cjfb4bqds000ijl0rvex1wjg7"},{"post_id":"cjfb4bqdk0004jl0rf08o3xcp","category_id":"cjfb4bqdq000djl0rzhl0oyi6","_id":"cjfb4bqdt000ljl0r5b86p04x"},{"post_id":"cjfb4bqdn0008jl0rf74fgoj9","category_id":"cjfb4bqdt000jjl0rk0gygosr","_id":"cjfb4bqdv000pjl0rk7soyb1x"},{"post_id":"cjfb4bqdo000ajl0rfc283mbr","category_id":"cjfb4bqdt000jjl0rk0gygosr","_id":"cjfb4bqdw000tjl0rn4574ifu"},{"post_id":"cjfb4bqdp000cjl0rxsvsvc6q","category_id":"cjfb4bqdt000jjl0rk0gygosr","_id":"cjfb4bqdx000yjl0ri473353y"},{"post_id":"cjfb4bqdq000gjl0rmeaublx6","category_id":"cjfb4bqdt000jjl0rk0gygosr","_id":"cjfb4bqdy0010jl0rkpg68y01"},{"post_id":"cjfb4bqds000hjl0r5e7dpwjd","category_id":"cjfb4bqdt000jjl0rk0gygosr","_id":"cjfb4bqdz0013jl0rp98qr158"}],"PostTag":[{"post_id":"cjfb4bqdh0002jl0rnfo5z06p","tag_id":"cjfb4bqdm0007jl0rkwe13blv","_id":"cjfb4bqdq000fjl0raem0kikc"},{"post_id":"cjfb4bqdk0004jl0rf08o3xcp","tag_id":"cjfb4bqdq000ejl0rrdjimw8j","_id":"cjfb4bqdw000rjl0rnlnwable"},{"post_id":"cjfb4bqdk0004jl0rf08o3xcp","tag_id":"cjfb4bqdt000kjl0rkx4cvce9","_id":"cjfb4bqdw000ujl0rbt8dxivo"},{"post_id":"cjfb4bqdk0004jl0rf08o3xcp","tag_id":"cjfb4bqdt000njl0rm048sv1v","_id":"cjfb4bqdx000wjl0rma2pdz6t"},{"post_id":"cjfb4bqdn0008jl0rf74fgoj9","tag_id":"cjfb4bqdt000njl0rm048sv1v","_id":"cjfb4bqdz0012jl0r68wdngia"},{"post_id":"cjfb4bqdn0008jl0rf74fgoj9","tag_id":"cjfb4bqdx000vjl0rj9gxhdqs","_id":"cjfb4bqdz0014jl0rndmfchqz"},{"post_id":"cjfb4bqdn0008jl0rf74fgoj9","tag_id":"cjfb4bqdy000zjl0rikazzo6g","_id":"cjfb4bqdz0016jl0re12weqzz"},{"post_id":"cjfb4bqdo000ajl0rfc283mbr","tag_id":"cjfb4bqdt000njl0rm048sv1v","_id":"cjfb4bqe00018jl0re3jbzfwz"},{"post_id":"cjfb4bqdo000ajl0rfc283mbr","tag_id":"cjfb4bqdz0015jl0rb8zou6vw","_id":"cjfb4bqe00019jl0rmv0xhgrj"},{"post_id":"cjfb4bqdp000cjl0rxsvsvc6q","tag_id":"cjfb4bqe00017jl0rqverj2e4","_id":"cjfb4bqe1001cjl0rnrzi9nd5"},{"post_id":"cjfb4bqdp000cjl0rxsvsvc6q","tag_id":"cjfb4bqe0001ajl0r1ex6ld3v","_id":"cjfb4bqe1001djl0rx1r6hk6g"},{"post_id":"cjfb4bqdq000gjl0rmeaublx6","tag_id":"cjfb4bqe1001bjl0rd2pkptyo","_id":"cjfb4bqe2001hjl0rqua2uzov"},{"post_id":"cjfb4bqdq000gjl0rmeaublx6","tag_id":"cjfb4bqe1001ejl0rxpe3xgp4","_id":"cjfb4bqe2001ijl0rdnpkxvy4"},{"post_id":"cjfb4bqdq000gjl0rmeaublx6","tag_id":"cjfb4bqe1001fjl0r9yeftgvh","_id":"cjfb4bqe3001kjl0rylxxe81o"},{"post_id":"cjfb4bqds000hjl0r5e7dpwjd","tag_id":"cjfb4bqe1001bjl0rd2pkptyo","_id":"cjfb4bqe3001ljl0rbkh1myx3"},{"post_id":"cjfb4bqds000hjl0r5e7dpwjd","tag_id":"cjfb4bqe2001jjl0rkjvr102l","_id":"cjfb4bqe3001mjl0rtxr4rqtp"}],"Tag":[{"name":"生活","_id":"cjfb4bqdm0007jl0rkwe13blv"},{"name":"约瑟夫环","_id":"cjfb4bqdq000ejl0rrdjimw8j"},{"name":"算法","_id":"cjfb4bqdt000kjl0rkx4cvce9"},{"name":"C++","_id":"cjfb4bqdt000njl0rm048sv1v"},{"name":"虚函数","_id":"cjfb4bqdx000vjl0rj9gxhdqs"},{"name":"多态","_id":"cjfb4bqdy000zjl0rikazzo6g"},{"name":"指针","_id":"cjfb4bqdz0015jl0rb8zou6vw"},{"name":"docker","_id":"cjfb4bqe00017jl0rqverj2e4"},{"name":"Linux","_id":"cjfb4bqe0001ajl0r1ex6ld3v"},{"name":"Hexo","_id":"cjfb4bqe1001bjl0rd2pkptyo"},{"name":"GitHub","_id":"cjfb4bqe1001ejl0rxpe3xgp4"},{"name":"Git","_id":"cjfb4bqe1001fjl0r9yeftgvh"},{"name":"Github Pages","_id":"cjfb4bqe2001jjl0rkjvr102l"}]}}